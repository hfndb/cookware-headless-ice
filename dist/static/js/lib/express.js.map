{"version":3,"sources":["express.ts"],"names":["bodyParser","require","express","session","MemoryStore","ExpressUtils","constructor","devMode","Map","getInstance","instance","app","activateMiddleware","cfg","AppConfig","use","requestLogger","json","urlencoded","extended","options","dependencies","activate","sessions","activateSessions","log","Logger","sess","domain","url","startsWith","process","env","NODE_ENV","set","cookie","secure","info","memoryStore","type","Object","assign","store","req","res","next","views","path","eu","id","headers","init","gracefulShutdown","server","listen","port","on","conn","key","remoteAddress","remotePort","connectionPool","delete","destroy","cb","close","keys","get","e","code","error","logging","exitOnError","setTimeout","shutdown","console","exit","setImmediate","emit","logRequest","str","method","statusCode","warn","logStatic","removeListener","getHeaders"],"mappings":"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","sourcesContent":["import { Response, Request } from \"express\";\nimport { AppConfig } from \"../lib/config\";\nimport { Logger } from \"./log\";\nconst bodyParser = require(\"body-parser\");\nconst express = require(\"express\");\nvar session = require(\"express-session\");\nvar MemoryStore = require(\"memorystore\")(session);\n\n/**\n * Utility class for Express\n *\n * @example\n * // Function to cleanup and shutdown application\n * export function gracefulShutdown(): void {\n *   ExpressUtils.shutdown();\n * }\n *\n * let eu = ExpressUtils.getInstance();\n * eu.app.get(/^.*\\/$/, controllerContent); // Home [of subdir]\n * eu.app.all(/^\\/.*.html$/, controllerContent); // HTML pages, to GET or POST\n * eu.init(gracefulShutdown);\n *\n * // Logging from within a controller:\n * ExpressUtils.logRequest(req, res);\n */\nexport class ExpressUtils {\n\t/**\n\t * @private\n\t */\n\tconnectionPool = new Map();\n\t/**\n\t * @private\n\t */\n\tserver: any;\n\t/**\n\t * @public\n\t */\n\tapp: any;\n\t/**\n\t * @public\n\t */\n\tdevMode: boolean;\n\n\tstatic instance: ExpressUtils | null = null;\n\n\tconstructor(devMode: boolean) {\n\t\tthis.devMode = devMode;\n\t}\n\n\t/**\n\t * Singleton factory to get instance\n\t */\n\tstatic getInstance(devMode: boolean = true): ExpressUtils {\n\t\tif (!ExpressUtils.instance) {\n\t\t\tExpressUtils.instance = new ExpressUtils(devMode);\n\t\t\tExpressUtils.instance.app = express();\n\t\t\tExpressUtils.instance.activateMiddleware();\n\t\t}\n\n\t\treturn ExpressUtils.instance;\n\t}\n\n\t/**\n\t * Add some middleware to server instance:\n\t * - Logging\n\t * - Body parsing\n\t * - Session management\n\t */\n\tprivate activateMiddleware() {\n\t\tlet cfg = AppConfig.getInstance();\n\n\t\t// -------------------------------------------------\n\t\t// Logging\n\t\t// -------------------------------------------------\n\t\tthis.app.use(ExpressUtils.requestLogger);\n\n\t\t// -------------------------------------------------\n\t\t// Body parsing\n\t\t// -------------------------------------------------\n\t\tthis.app.use(bodyParser.json()); // to support JSON-encoded bodies\n\t\tthis.app.use(\n\t\t\tbodyParser.urlencoded({\n\t\t\t\t// to support URL-encoded bodies\n\t\t\t\textended: true\n\t\t\t})\n\t\t);\n\n\t\tif (cfg.options.dependencies.express.activate.sessions) {\n\t\t\tthis.activateSessions();\n\t\t}\n\t}\n\n\tprivate activateSessions() {\n\t\tlet cfg = AppConfig.getInstance();\n\t\tlet log = Logger.getInstance();\n\t\tlet sess = cfg.options.dependencies.express.session;\n\t\t/*\n\t\t\tDefault values of express-session:\n\t\t\t{ path: '/', httpOnly: true, secure: false, maxAge: null }\n\t\t\t\tgenid: uses uid-safe\n\t\t\t\tname:  connect.sid\n\t\t*/\n\n\t\tif (!this.devMode && cfg.options.domain.url.startsWith(\"https\") && process.env.NODE_ENV == \"production\") {\n\t\t\tthis.app.set(\"trust proxy\", 1); // trust first proxy\n\t\t\tsess.cookie.secure = true; // serve secure cookies\n\t\t} else {\n\t\t\tsess.cookie.secure = false;\n\t\t}\n\n\t\tif (this.devMode) {\n\t\t\tlog.info(sess);\n\t\t}\n\t\tswitch (cfg.options.dependencies.express.memoryStore.type) {\n\t\t\tcase \"memoryStore\":\n\t\t\t\tsess = Object.assign(sess, {\n\t\t\t\t\tstore: new MemoryStore(cfg.options.dependencies.express.memoryStore.memoryStore)\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.app.use(session(sess));\n\n\t\tthis.app.use(function(req: any, res: Response, next: Function) {\n\t\t\tres; // Fool compiler - unused variable\n\t\t\tif (!req.session.views) {\n\t\t\t\treq.session.views = {};\n\t\t\t}\n\n\t\t\tif (!req.path.startsWith(\"/static\")) {\n\t\t\t\treq.session.views[req.path] = (req.session.views[req.path] || 0) + 1;\n\t\t\t}\n\n\t\t\tlet eu = ExpressUtils.getInstance();\n\t\t\tlet log = Logger.getInstance();\n\n\t\t\tif (eu.devMode && !req.path.startsWith(\"/static\")) {\n\t\t\t\tlog.info(\n\t\t\t\t\t\"\\nSession ID\",\n\t\t\t\t\treq.session.id, // read only\n\t\t\t\t\t\"\\nViews\",\n\t\t\t\t\treq.session.views,\n\t\t\t\t\t\"\\nRequest headers\",\n\t\t\t\t\treq.headers\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tnext();\n\t\t});\n\t}\n\n\t/**\n\t * Initialize and prepare smooth shutdown of server.\n\t * Connections will be killed in order to speed shutdown up\n\t *\n\t * Method inspired by: https://github.com/isaacs/server-destroy/blob/master/index.js\n\t */\n\tinit(gracefulShutdown: any): void {\n\t\tlet cfg = AppConfig.getInstance();\n\t\tlet eu = ExpressUtils.getInstance();\n\t\tlet log = Logger.getInstance();\n\n\t\t// ---------------------------------------------------------------------------------------------------\n\t\t// Naked server - begin\n\t\t// ---------------------------------------------------------------------------------------------------\n\n\t\t// Relevant for testing and server reboot:\n\t\t// The app.listen() method returns an(node) http.Server object\n\t\t// https://nodejs.org/api/net.html#net_server_close_callback\n\t\tthis.server = this.app.listen(cfg.options.server.port);\n\n\t\tprocess.on(\"SIGINT\", gracefulShutdown); // Ctrl-c\n\t\tprocess.on(\"SIGTERM\", gracefulShutdown); // Kill process otherwise\n\n\t\tthis.server.on(\"connection\", function(conn: any) {\n\t\t\tlet key = conn.remoteAddress + \":\" + conn.remotePort;\n\t\t\t// console.log(`Key added: ${key}`);\n\t\t\teu.connectionPool.set(key, conn);\n\t\t\tconn.on(\"close\", function() {\n\t\t\t\teu.connectionPool.delete(key);\n\t\t\t\t// console.log(`Key deleted: ${key}`);\n\t\t\t});\n\t\t});\n\n\t\tthis.server.destroy = function(cb: any) {\n\t\t\teu.server.close(cb);\n\t\t\tfor (let key in eu.connectionPool.keys()) {\n\t\t\t\teu.connectionPool.get(key).destroy();\n\t\t\t}\n\t\t};\n\n\t\tthis.server.on(\"error\", (e: any) => {\n\t\t\tif (e.code === \"EADDRINUSE\") {\n\t\t\t\tlog.error(\"Whoops! Address in use, seems to be running already. Shutting down this server instance...\");\n\t\t\t\tif (!cfg.options.logging.exitOnError) {\n\t\t\t\t\tgracefulShutdown();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\t// Take some time to know for sure the 'address in use' error didn't occur\n\t\t\tlog.info(`Initialization finalized - server running at port ${cfg.options.server.port}`);\n\t\t}, 3000);\n\t}\n\n\t/**\n   * Smooth shutdown of server\n   */\n\tstatic shutdown(): void {\n\t\tlet eu = ExpressUtils.getInstance();\n\n\t\teu.server.close(function() {\n\t\t\tif (process.env.NODE_ENV != \"test\") {\n\t\t\t\tconsole.log(\"Bye!\\n\");\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\t\t});\n\n\t\tsetImmediate(function() {\n\t\t\teu.server.emit(\"close\");\n\t\t}); // Inspired by https://stackoverflow.com/questions/14626636/how-do-i-shutdown-a-node-js-https-server-immediately\n\t}\n\n\t/**\n\t * To be called from controller, to log a HTTP request\n\t */\n\tstatic logRequest(req: Request, res: Response): void {\n\t\tif (req.path == \"/favicon.ico\") return;\n\t\tlet log = Logger.getInstance();\n\t\tlet str = `${req.method} ${res.statusCode} ${req.url}`;\n\t\t// ${ res.statusMessage }  ${res.get(\"Content-Length\") || 0}b\n\t\tif (res.statusCode == 404) {\n\t\t\tlog.warn(str);\n\t\t} else {\n\t\t\tlog.info(str);\n\t\t}\n\t}\n\n\t/**\n\t * Middleware for logging to console\n\t * Usage: app.use(ExpressUtils.requestLogger);\n\t */\n\tstatic requestLogger(req: Request, res: Response, next: Function) {\n\t\t//\n\t\t// Inspired by:\n\t\t// https://dev.to/brightdevs/http-request-logging-in-nodejs-42od\n\t\t// For production use (server) it would need correlation: Requests with responses\n\t\t//\n\t\tres.on(\"finish\", () => {\n\t\t\tlet cfg = AppConfig.getInstance();\n\n\t\t\tif (req.path.startsWith(\"/static\")) {\n\t\t\t\tif (cfg.options.server.logStatic) ExpressUtils.logRequest(req, res);\n\t\t\t} else {\n\t\t\t\tExpressUtils.logRequest(req, res);\n\t\t\t}\n\n\t\t\tres.removeListener(\"finish\", ExpressUtils.requestLogger);\n\n\t\t\tlet eu = ExpressUtils.getInstance();\n\t\t\tif (eu.devMode && !req.path.startsWith(\"/static\")) {\n\t\t\t\tlet log = Logger.getInstance();\n\t\t\t\tlog.info(\"\\nResponse headers:\", res.getHeaders());\n\t\t\t}\n\t\t});\n\n\t\tnext();\n\t}\n}\n"]}