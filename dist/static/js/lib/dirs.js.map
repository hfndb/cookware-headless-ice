{"version":3,"sources":["dirs.ts"],"names":["createDirTree","rootDir","tree","sourceControl","Object","entries","forEach","entry","key","value","i","length","FileUtils","mkdir","includes","Error","getDirList","path","recursive","dirs","addPath","dirname","file","realpath","push","substr"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAyDO,SAASA,aAAT,CACNC,OADM,EAENC,IAFM,EAGNC,aAAsB,GAAG,KAHnB,EAIC;AACPC,EAAAA,MAAM,CAACC,OAAP,CAAeH,IAAf,EAAqBI,OAArB,CAA8BC,KAAD,IAA0B;AACtD,QAAIC,GAAG,GAAGD,KAAK,CAAC,CAAD,CAAf;;AACA,QAAIC,GAAG,IAAI,MAAX,EAAmB;AAClB,UAAIC,KAAe,GAAGF,KAAK,CAAC,CAAD,CAA3B;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACtCE,yBAAUC,KAAV,CAAgB,gBAAKZ,OAAL,EAAcQ,KAAK,CAACC,CAAD,CAAnB,CAAhB;;AACA,YAAIP,aAAJ,EAAmB;AAClB,8BAAM,gBAAKF,OAAL,EAAcQ,KAAK,CAACC,CAAD,CAAnB,EAAwB,eAAxB,CAAN;AACA;AACD;AACD,KARD,MAQO,IAAIF,GAAG,IAAI,QAAX,EAAqB;AAC3B,UAAI,gBAAKP,OAAL,EAAcO,GAAd,EAAmBM,QAAnB,CAA4B,QAA5B,CAAJ,EAA2C;AAC1C,cAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN;AACA;;AACD,UAAIN,KAAa,GAAGF,KAAK,CAAC,CAAD,CAAzB;;AACAK,uBAAUC,KAAV,CAAgB,gBAAKZ,OAAL,EAAcO,GAAd,CAAhB;;AACAR,MAAAA,aAAa,CAAC,gBAAKC,OAAL,EAAcO,GAAd,CAAD,EAAqBC,KAArB,EAA4BN,aAA5B,CAAb;AACA;AACD,GAlBD;AAmBA;;AAQM,SAASa,UAAT,CAAoBC,IAApB,EAAkCC,SAAkB,GAAG,IAAvD,EAAuE;AAC7E,MAAI,CAAC,mBAAK,IAAL,EAAWD,IAAX,CAAL,EAAuB;AACtB,UAAM,IAAIF,KAAJ,CAAW,QAAOE,IAAK,gBAAvB,CAAN;AACA;;AAED,MAAIE,IAAc,GAAG,EAArB;;AAEA,WAASC,OAAT,CAAiBC,OAAjB,EAAkC;AACjC,yBAAYA,OAAZ,EAAqBf,OAArB,CAA8BgB,IAAD,IAAkB;AAC9C,YAAMC,QAAQ,GAAG,gBAAKF,OAAL,EAAcC,IAAd,CAAjB;;AACA,UAAI,mBAAK,IAAL,EAAWC,QAAX,CAAJ,EAA0B;AACzB,YAAIL,SAAJ,EAAeE,OAAO,CAACG,QAAD,CAAP;AACfJ,QAAAA,IAAI,CAACK,IAAL,CAAUD,QAAQ,CAACE,MAAT,CAAgBR,IAAI,CAACN,MAAL,GAAc,CAA9B,CAAV;AACA;AACD,KAND;AAOA;;AAED,MAAI,mBAAK,IAAL,EAAWM,IAAX,CAAJ,EAAsB;AACrBG,IAAAA,OAAO,CAACH,IAAD,CAAP;AACA;;AAED,SAAOE,IAAP;AACA","sourcesContent":["import { readdirSync } from \"fs\";\nimport { join } from \"path\";\nimport { test, touch } from \"shelljs\";\nimport { FileUtils } from \"./files\";\n\n/**\n * Create a directory tree.\n *\n * Usage:\n *\n * \tconst tree = {\n *\t\t\"dirs\": [\"backups\", \"notes\", \"sass\"],\n *\t\t\"content\": {\n *\t\t\t\"dirs\": [\"includes\", \"tmeplates\"]\n *\t\t},\n *\t\t\"dist\": {\n *\t\t\t\"static\": {\n *\t\t\t\t\"dirs\": [\"css\", \"img\"],\n *\t\t\t\t\"js\": {\n *\t\t\t\t\t\"dirs\": [\"browser\", \"local\", \"test\"],\n *\t\t\t\t\t\"server\": {\n *\t\t\t\t\t\t\"dirs\": [\"controllers\", \"views\"]\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t},\n *\t\t\"src\": {\n *\t\t\t\"dirs\": [\"browser\", \"local\", \"test\"],\n *\t\t\t\"server\": {\n *\t\t\t\t\"dirs\": [\"controllers\", \"views\"]\n *\t\t\t}\n *\t\t}\n *\t};\n *\n *\tcreateDirTree(\"/tmp/test\", tree);\n *\n * Creates directory structure:\n *\n * - /tmp/test/backups\n * - /tmp/test/notes\n * - /tmp/test/sass\n * - /tmp/test/content/includes\n * - /tmp/test/content/tmeplates\n * - /tmp/test/dist/static/css\n * - /tmp/test/dist/static/img\n * - /tmp/test/dist/static/js/browser\n * - /tmp/test/dist/static/js/local\n * - /tmp/test/dist/static/js/test\n * - /tmp/test/dist/static/js/server/controllers\n * - /tmp/test/dist/static/js/server/views\n * - /tmp/test/src/browser\n * - /tmp/test/src/local\n * - /tmp/test/src/test\n * - /tmp/test/src/server/controllers\n * - /tmp/test/src/server/views\n *\n * @param rootDir\n * @param tree object with definition\n * @param sourceControl in case of Source Controle, touch a delete-me.txt file\n */\nexport function createDirTree(\n\trootDir: string,\n\ttree: object,\n\tsourceControl: boolean = false\n): void {\n\tObject.entries(tree).forEach((entry: [string, any]) => {\n\t\tlet key = entry[0];\n\t\tif (key == \"dirs\") {\n\t\t\tlet value: string[] = entry[1];\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\tFileUtils.mkdir(join(rootDir, value[i]));\n\t\t\t\tif (sourceControl) {\n\t\t\t\t\ttouch(join(rootDir, value[i], \"delete-me.txt\"));\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (key != \"length\") {\n\t\t\tif (join(rootDir, key).includes(\"length\")) {\n\t\t\t\tthrow new Error(\"test error\");\n\t\t\t}\n\t\t\tlet value: object = entry[1];\n\t\t\tFileUtils.mkdir(join(rootDir, key));\n\t\t\tcreateDirTree(join(rootDir, key), value, sourceControl);\n\t\t}\n\t});\n}\n\n/**\n * Method to create a list of directories within a directory name\n *\n * @param path of dir\n * @returns array with dir list\n */\nexport function getDirList(path: string, recursive: boolean = true): string[] {\n\tif (!test(\"-e\", path)) {\n\t\tthrow new Error(`Path ${path} doesn't exist`);\n\t}\n\n\tlet dirs: string[] = [];\n\n\tfunction addPath(dirname: string) {\n\t\treaddirSync(dirname).forEach((file: string) => {\n\t\t\tconst realpath = join(dirname, file);\n\t\t\tif (test(\"-d\", realpath)) {\n\t\t\t\tif (recursive) addPath(realpath);\n\t\t\t\tdirs.push(realpath.substr(path.length + 1));\n\t\t\t}\n\t\t});\n\t}\n\n\tif (test(\"-d\", path)) {\n\t\taddPath(path);\n\t}\n\n\treturn dirs;\n}\n"]}