{"version":3,"sources":["pgp.ts"],"names":["signFile","file","log","Logger","getInstance","info","concat","err","error","error2string"],"mappings":";;;;;;;;;AAAA;;AACA;;AAWO,SAASA,QAAT,CAAkBC,IAAlB,EAAgC;AACtC,MAAIC,GAAG,GAAGC,YAAOC,WAAP,EAAV;;AAEA,MAAI;AACH,uBAAM,mBAAkBH,IAAK,EAA7B,EAAgC,EAAhC;AACAC,IAAAA,GAAG,CAACG,IAAJ,CAAU,gBAAeJ,IAAK,EAA9B;AACA,qBAAGA,IAAH;AACA,qBAAGA,IAAI,CAACK,MAAL,CAAY,MAAZ,CAAH,EAAwBL,IAAxB;AACA,GALD,CAKE,OAAOM,GAAP,EAAY;AACbL,IAAAA,GAAG,CAACM,KAAJ,CAAW,yBAAwBP,IAAK,EAAxC,EAA2CE,YAAOM,YAAP,CAAoBF,GAApB,CAA3C;AACA;AACD","sourcesContent":["import { exec, mv, rm } from \"shelljs\";\nimport { Logger } from \"./log\";\n\n/**\n * Sign a file with GnuPG\n * Download: https://gnupg.org/download/\n *\n * Signed file can be verified by:\n * gpg --verify <file name>\n *\n * @param file\n */\nexport function signFile(file: string) {\n\tlet log = Logger.getInstance();\n\n\ttry {\n\t\texec(`gpg --clearsign ${file}`, {});\n\t\tlog.info(`File signed: ${file}`);\n\t\trm(file);\n\t\tmv(file.concat(\".asc\"), file);\n\t} catch (err) {\n\t\tlog.error(`- Failed to sign file ${file}`, Logger.error2string(err));\n\t}\n}\n"]}