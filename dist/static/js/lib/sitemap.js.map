{"version":3,"sources":["sitemap.ts"],"names":["Sitemap","constructor","dir","file","baseUrl","entries","write","entry","FileUtils","writeFile","addEntry","lastMod","frmtr","Formatter","getInstance","url","endsWith","replace","date","finish","generate","verbose","cfg","AppConfig","isProject","options","sitemap","log","Logger","logging","outputDir","Content","getOutputDir","html","getFileList","allowedExtensions","outputFile","domain","isNew","forEach","source","modified","mtime","ArrayUtils","inExcludeList","exclude","info"],"mappings":"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","sourcesContent":["import { statSync } from \"fs\";\nimport { join } from \"path\";\nimport { AppConfig, FileUtils, Logger } from \"../lib\";\nimport { ArrayUtils } from \"./object\";\nimport { Content } from \"./html\";\nimport { Formatter } from \"./utils\";\nimport { rm, test } from \"shelljs\";\n\nexport class Sitemap {\n\tprivate baseUrl: string;\n\tprivate dir: string;\n\tprivate file: string;\n\tprivate entries: number;\n\n\t/**\n\t * @param dir of output file\n\t * @param file name of output file\n\t * @param baseUrl of website\n\t */\n\tconstructor(dir: string, file: string, baseUrl: string) {\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.dir = dir;\n\t\tthis.file = file;\n\t\tthis.entries = 0;\n\n\t\trm(\"-f\", join(dir, file));\n\t\tthis.write('<?xml version=\"1.0\" ?>');\n\t\tthis.write('<urlset xmlns=\"http://www.google.com/schemas/sitemap/0.84\">');\n\t}\n\n\tprivate write(entry: string): void {\n\t\tFileUtils.writeFile(this.dir, this.file, entry + \"\\n\", false, \"a\");\n\t}\n\n\t/**\n\t * @param entry relative from website root\n\t * @param lastMod last modification date\n\t */\n\tpublic addEntry(entry: string, lastMod: Date): void {\n\t\tconst frmtr = Formatter.getInstance();\n\t\tlet url = `${this.baseUrl}/${entry}`;\n\t\tif (url.endsWith(\"index.html\")) {\n\t\t\turl = url.replace(\"index.html\", \"\");\n\t\t}\n\n\t\tthis.write(\"\\t<url>\");\n\t\tthis.write(`\\t\\t<loc>${url}</loc>`);\n\t\tthis.write(`\\t\\t<lastmod>${frmtr.date(lastMod, \"YYYY-MM-DD\")}</lastmod>`);\n\t\tthis.write(\"\\t</url>\");\n\t\tthis.entries++;\n\t}\n\n\t/**\n\t * Close the file\n\t *\n\t * @returns number of entries in sitemap\n\t */\n\tpublic finish(): number {\n\t\tthis.write(\"</urlset>\");\n\t\treturn this.entries;\n\t}\n\n\t/**\n\t * Generate Google sitemap\n\t */\n\tstatic generate(verbose: boolean) {\n\t\tlet cfg = AppConfig.getInstance();\n\t\tif (!cfg.isProject || !cfg.options.sitemap.generate) {\n\t\t\treturn;\n\t\t}\n\t\tlet log = Logger.getInstance(cfg.options.logging);\n\t\tlet outputDir = Content.getOutputDir();\n\n\t\tlet html = FileUtils.getFileList(outputDir, {\n\t\t\tallowedExtensions: [\".html\"]\n\t\t});\n\t\tlet outputFile = join(outputDir, \"sitemap.xml\");\n\t\tlet sitemap = new Sitemap(outputDir, \"sitemap.xml\", cfg.options.domain.url);\n\t\tlet isNew = test(\"-f\", outputFile);\n\n\t\thtml.forEach((entry: string) => {\n\t\t\tlet source = join(outputDir, entry);\n\t\t\tlet modified = statSync(source).mtime;\n\t\t\tif (ArrayUtils.inExcludeList(cfg.options.sitemap.exclude, entry)) return;\n\t\t\tsitemap.addEntry(entry, modified);\n\t\t});\n\n\t\tsitemap.finish();\n\t\tif (isNew && verbose) {\n\t\t\tlog.info(\"Google sitemap generated\");\n\t\t} else if (verbose) {\n\t\t\tlog.info(\"Google sitemap updated\");\n\t\t}\n\t}\n}\n"]}