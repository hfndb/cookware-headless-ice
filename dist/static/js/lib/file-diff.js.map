{"version":3,"sources":["file-diff.ts"],"names":["FileStatus","constructor","path","dir","containsChange","list","changeFound","forEach","entry","isNewOrModified","setSoure","file","ext","source","lastModified","FileUtils","getLastModified","status","setTarget","flatten","targetDir","targetExt","target","concat","targetLastModified","getChangeList","opts","changes","sources","getFileList","sourcePath","allowedExtensions","sourceExt","ArrayUtils","inExcludeList","excludeList","targetPath","undefined","push"],"mappings":";;;;;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAiBO,MAAMA,UAAN,CAAiB;AAgBvBC,EAAAA,WAAW,CAACC,IAAD,EAAe;AAAA,0CAfH,CAeG;;AAAA,oCAdT,EAcS;;AAAA;;AAAA,oCAZT,EAYS;;AAAA,oCAXT,EAWS;;AAAA,uCAVN,EAUM;;AAAA,gDATG,CASH;;AAAA,iCAPJ,EAOI;;AAAA,uCANE,EAMF;;AACzB,SAAKC,GAAL,GAAWD,IAAX;AACA;;AAKD,SAAOE,cAAP,CAAsBC,IAAtB,EAAmD;AAClD,QAAIC,WAAW,GAAG,KAAlB;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAcC,KAAD,IAAuB;AACnC,UAAIA,KAAK,CAACC,eAAN,EAAJ,EAA6B;AAC5BH,QAAAA,WAAW,GAAG,IAAd;AACA;AACD,KAJD;AAKA,WAAOA,WAAP;AACA;;AAOMI,EAAAA,QAAP,CAAgBC,IAAhB,EAA8BC,GAA9B,EAA2C;AAC1C,SAAKC,MAAL,GAAcF,IAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKE,YAAL,GAAoBC,iBAAUC,eAAV,CAA0B,KAAKb,GAA/B,EAAoC,KAAKU,MAAzC,CAApB;AACA,SAAKI,MAAL,GAAc,SAAd;AACA;;AAQMC,EAAAA,SAAP,CAAiBhB,IAAjB,EAA+BU,GAA/B,EAA4CO,OAAgB,GAAG,KAA/D,EAAsE;AACrE,SAAKC,SAAL,GAAiBlB,IAAjB;AACA,SAAKmB,SAAL,GAAiBT,GAAjB;;AACA,QAAIO,OAAJ,EAAa;AACZ,WAAKG,MAAL,GAAc,gBAAK,oBAAS,KAAKT,MAAd,EAAsB,KAAKD,GAA3B,EAAgCW,MAAhC,CAAuC,KAAKF,SAA5C,CAAL,CAAd;AACA,KAFD,MAEO;AACN,WAAKC,MAAL,GAAc,gBACb,mBAAQ,KAAKT,MAAb,CADa,EAEb,oBAAS,KAAKA,MAAd,EAAsB,KAAKD,GAA3B,CAFa,EAGZW,MAHY,CAGL,KAAKF,SAHA,CAAd;AAIA;;AAED,QAAI,mBAAK,IAAL,EAAW,gBAAK,KAAKD,SAAV,EAAqB,KAAKE,MAA1B,CAAX,CAAJ,EAAmD;AAClD,WAAKE,kBAAL,GAA0BT,iBAAUC,eAAV,CACzB,KAAKI,SADoB,EAEzB,KAAKE,MAFoB,CAA1B;AAIA,WAAKL,MAAL,GACC,KAAKH,YAAL,GAAoB,KAAKU,kBAAzB,GAA8C,UAA9C,GAA2D,WAD5D;AAEA,KAPD,MAOO;AACN,WAAKP,MAAL,GAAc,KAAd;AACA;AACD;;AAKMR,EAAAA,eAAP,GAAkC;AACjC,WAAO,KAAKQ,MAAL,IAAe,KAAf,IAAwB,KAAKA,MAAL,IAAe,UAA9C;AACA;;AAhFsB;;;;AAsFjB,SAASQ,aAAT,CAAuBC,IAAvB,EAAuD;AAC7D,MAAIC,OAAqB,GAAG,EAA5B;;AACA,MAAIC,OAAO,GAAGb,iBAAUc,WAAV,CAAsBH,IAAI,CAACI,UAA3B,EAAuC;AACpDC,IAAAA,iBAAiB,EAAEL,IAAI,CAACM;AAD4B,GAAvC,CAAd;;AAIAJ,EAAAA,OAAO,CAACrB,OAAR,CAAiBI,IAAD,IAAkB;AACjC,QAAIsB,mBAAWC,aAAX,CAAyBR,IAAI,CAACS,WAAL,IAAoB,EAA7C,EAAiDxB,IAAjD,CAAJ,EAA4D;AAE5D,QAAIM,MAAM,GAAG,IAAIjB,UAAJ,CAAe0B,IAAI,CAACI,UAApB,CAAb;AACAb,IAAAA,MAAM,CAACP,QAAP,CAAgBC,IAAhB,EAAsB,mBAAQA,IAAR,CAAtB;AACAM,IAAAA,MAAM,CAACC,SAAP,CACCQ,IAAI,CAACU,UADN,EAECV,IAAI,CAACL,SAFN,EAGCK,IAAI,CAACP,OAAL,IAAgBkB,SAAhB,IAA6BX,IAAI,CAACP,OAHnC;AAKAQ,IAAAA,OAAO,CAACW,IAAR,CAAarB,MAAb;AACA,GAXD;AAaA,SAAOU,OAAP;AACA","sourcesContent":["import { statSync } from \"fs\";\nimport { basename, dirname, extname, join } from \"path\";\nimport { test } from \"shelljs\";\nimport { FileUtils } from \"./files\";\nimport { ArrayUtils } from \"./object\";\n\n/**\n * For getChangeList()\n */\nexport interface ChangeList {\n\tsourcePath: string;\n\ttargetPath: string;\n\tsourceExt: string[];\n\ttargetExt: string;\n\texcludeList?: string[];\n\tflatten?: boolean;\n}\n\n/**\n * Utility class to get file info and compare files\n */\nexport class FileStatus {\n\tlastModified: number = 0;\n\tsource: string = \"\";\n\tdir: string;\n\tstatus: string = \"\"; // can be unknown, unchanged, new or modified\n\ttarget: string = \"\";\n\ttargetDir: string = \"\";\n\ttargetLastModified: number = 0;\n\n\tprivate ext: string = \"\";\n\tprivate targetExt: string = \"\";\n\n\t/**\n\t * Sets source file\n\t * @param path to base directory\n\t */\n\tconstructor(path: string) {\n\t\tthis.dir = path;\n\t}\n\n\t/**\n\t * Check array of FileStatus for isNewOrModified()\n\t */\n\tstatic containsChange(list: FileStatus[]): boolean {\n\t\tlet changeFound = false;\n\t\tlist.forEach((entry: FileStatus) => {\n\t\t\tif (entry.isNewOrModified()) {\n\t\t\t\tchangeFound = true;\n\t\t\t}\n\t\t});\n\t\treturn changeFound;\n\t}\n\n\t/**\n\t * Primary file\n\t * @param file relative to base directory\n\t * @param ext\n\t */\n\tpublic setSoure(file: string, ext: string) {\n\t\tthis.source = file;\n\t\tthis.ext = ext;\n\t\tthis.lastModified = FileUtils.getLastModified(this.dir, this.source);\n\t\tthis.status = \"unknown\";\n\t}\n\n\t/**\n\t * Secondary file\n\t * @param path\n\t * @param ext\n\t * @param flatten ignore relative path in this.source\n\t */\n\tpublic setTarget(path: string, ext: string, flatten: boolean = false) {\n\t\tthis.targetDir = path;\n\t\tthis.targetExt = ext;\n\t\tif (flatten) {\n\t\t\tthis.target = join(basename(this.source, this.ext).concat(this.targetExt));\n\t\t} else {\n\t\t\tthis.target = join(\n\t\t\t\tdirname(this.source),\n\t\t\t\tbasename(this.source, this.ext)\n\t\t\t).concat(this.targetExt);\n\t\t}\n\n\t\tif (test(\"-e\", join(this.targetDir, this.target))) {\n\t\t\tthis.targetLastModified = FileUtils.getLastModified(\n\t\t\t\tthis.targetDir,\n\t\t\t\tthis.target\n\t\t\t);\n\t\t\tthis.status =\n\t\t\t\tthis.lastModified > this.targetLastModified ? \"modified\" : \"unchanged\";\n\t\t} else {\n\t\t\tthis.status = \"new\";\n\t\t}\n\t}\n\n\t/**\n\t * Check soure file status\n\t */\n\tpublic isNewOrModified(): boolean {\n\t\treturn this.status == \"new\" || this.status == \"modified\";\n\t}\n}\n\n/**\n * Get an array of (un)modified or new files\n */\nexport function getChangeList(opts: ChangeList): FileStatus[] {\n\tlet changes: FileStatus[] = [];\n\tlet sources = FileUtils.getFileList(opts.sourcePath, {\n\t\tallowedExtensions: opts.sourceExt\n\t});\n\n\tsources.forEach((file: string) => {\n\t\tif (ArrayUtils.inExcludeList(opts.excludeList || [], file)) return;\n\n\t\tlet status = new FileStatus(opts.sourcePath);\n\t\tstatus.setSoure(file, extname(file));\n\t\tstatus.setTarget(\n\t\t\topts.targetPath,\n\t\t\topts.targetExt,\n\t\t\topts.flatten != undefined && opts.flatten\n\t\t);\n\t\tchanges.push(status);\n\t});\n\n\treturn changes;\n}\n"]}