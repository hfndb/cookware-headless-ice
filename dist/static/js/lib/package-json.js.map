{"version":3,"sources":["package-json.ts"],"names":["getPackages","dir","packages","FileUtils","readJsonFile","pkg","key","dependencies","startsWith","push","devDependencies","getPackageReadmeFiles","sys","cfg","AppConfig","getInstance","dirMain","dirProject","log","Logger","warn","list","mds","isProject","i","length","getFileList","allowedExtensions","recursive","forEach","file","toLowerCase","name"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAKO,SAASA,WAAT,CAAqBC,GAArB,EAA4C;AAClD,MAAIC,QAAa,GAAGC,iBAAUC,YAAV,CAAuB,gBAAKH,GAAL,EAAU,cAAV,CAAvB,EAAkD,IAAlD,CAApB;;AACA,MAAII,GAAa,GAAG,EAApB;;AAEA,OAAK,IAAIC,GAAT,IAAgBJ,QAAQ,CAACK,YAAzB,EAAuC;AACtC,QAAI,CAACD,GAAG,CAACE,UAAJ,CAAe,QAAf,CAAL,EAA+BH,GAAG,CAACI,IAAJ,CAASH,GAAT;AAC/B;;AAED,OAAK,IAAIA,GAAT,IAAgBJ,QAAQ,CAACQ,eAAzB,EAA0C;AACzC,QAAI,CAACJ,GAAG,CAACE,UAAJ,CAAe,QAAf,CAAL,EAA+BH,GAAG,CAACI,IAAJ,CAASH,GAAT;AAC/B;;AAED,SAAOD,GAAP;AACA;;AAKM,SAASM,qBAAT,CAA+BC,GAA/B,EAAuD;AAC7D,MAAIC,GAAG,GAAGC,kBAAUC,WAAV,EAAV;;AACA,MAAId,GAAG,GAAGW,GAAG,GAAGC,GAAG,CAACG,OAAP,GAAiBH,GAAG,CAACI,UAAlC;;AACA,MAAI,CAAC,mBAAK,IAAL,EAAW,gBAAKhB,GAAL,EAAU,cAAV,CAAX,CAAL,EAA4C;AAC3C,QAAIiB,GAAG,GAAGC,YAAOJ,WAAP,EAAV;;AACAG,IAAAA,GAAG,CAACE,IAAJ,CAAU,sCAAqCnB,GAAI,EAAnD;AACA,WAAO,EAAP;AACA;;AACD,MAAIoB,IAAI,GAAGrB,WAAW,CAACC,GAAD,CAAtB;AACA,MAAIqB,GAAa,GAAG,EAApB;AACA,MAAIjB,GAAW,GAAG,EAAlB;AAEA,MAAI,CAACQ,GAAG,CAACU,SAAL,IAAkB,CAACX,GAAvB,EAA4B,OAAOU,GAAP;;AAE5B,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrCnB,IAAAA,GAAG,GAAGgB,IAAI,CAACG,CAAD,CAAV;;AACArB,qBAAUuB,WAAV,CAAsB,gBAAKzB,GAAL,EAAU,cAAV,EAA0BI,GAA1B,CAAtB,EAAsD;AACrDsB,MAAAA,iBAAiB,EAAE,CAAC,KAAD,CADkC;AAErDC,MAAAA,SAAS,EAAE;AAF0C,KAAtD,EAGGC,OAHH,CAGWC,IAAI,IAAI;AAClB,UAAIA,IAAI,CAACC,WAAL,MAAsB,WAA1B,EAAuC;AACtCT,QAAAA,GAAG,CAACb,IAAJ,CAAS;AACRuB,UAAAA,IAAI,EAAE3B,GADE;AAERyB,UAAAA,IAAI,EAAEA;AAFE,SAAT;AAIA;AACD,KAVD;AAWA;;AAED,SAAOR,GAAP;AACA","sourcesContent":["import { join } from \"path\";\nimport { test } from \"shelljs\";\nimport { AppConfig } from \"./config\";\nimport { FileUtils } from \"./files\";\nimport { Logger } from \"./log\";\n\n/**\n * Get a list of installed packages, excluding those starting with @types\n */\nexport function getPackages(dir: string): string[] {\n\tlet packages: any = FileUtils.readJsonFile(join(dir, \"package.json\"), true);\n\tlet pkg: string[] = [];\n\n\tfor (let key in packages.dependencies) {\n\t\tif (!key.startsWith(\"@types\")) pkg.push(key);\n\t}\n\n\tfor (let key in packages.devDependencies) {\n\t\tif (!key.startsWith(\"@types\")) pkg.push(key);\n\t}\n\n\treturn pkg;\n}\n\n/**\n * Get a list of README.md files in installed packages\n */\nexport function getPackageReadmeFiles(sys: boolean): object[] {\n\tlet cfg = AppConfig.getInstance();\n\tlet dir = sys ? cfg.dirMain : cfg.dirProject;\n\tif (!test(\"-f\", join(dir, \"package.json\"))) {\n\t\tlet log = Logger.getInstance();\n\t\tlog.warn(`No package.json found in directory ${dir}`);\n\t\treturn []; // Should not occur, since controller filters\n\t}\n\tlet list = getPackages(dir);\n\tlet mds: object[] = [];\n\tlet pkg: string = \"\";\n\n\tif (!cfg.isProject && !sys) return mds;\n\n\tfor (let i = 0; i < list.length; i++) {\n\t\tpkg = list[i];\n\t\tFileUtils.getFileList(join(dir, \"node_modules\", pkg), {\n\t\t\tallowedExtensions: [\".md\"],\n\t\t\trecursive: false\n\t\t}).forEach(file => {\n\t\t\tif (file.toLowerCase() == \"readme.md\") {\n\t\t\t\tmds.push({\n\t\t\t\t\tname: pkg,\n\t\t\t\t\tfile: file\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\treturn mds;\n}\n"]}