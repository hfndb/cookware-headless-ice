{"version":3,"sources":["beautify.ts"],"names":["cfg","AppConfig","getInstance","log","Logger","options","logging","Beautify","standAlone","path","endsWith","substr","length","pathIsDir","dirProject","files","FileUtils","getFileList","i","file","content","readFile","data","writeFile","ext","dependencies","prettier","config","parser","require","Object","assign","filepath","format","undefined","info","err","warn","error2string"],"mappings":"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","sourcesContent":["import { AppConfig, FileUtils, Logger } from \"../lib\";\nimport { extname, join } from \"path\";\nimport { test } from \"shelljs\";\n\nlet cfg = AppConfig.getInstance(\"cookware-headless-ice\");\nlet log = Logger.getInstance(cfg.options.logging);\n\nexport class Beautify {\n\t/**\n\t * Stand-alone version to beautify a file or directory with content\n\t */\n\tstatic standAlone(path: string): void {\n\t\tif (path.endsWith(\"/\")) path = path.substr(0, path.length - 1);\n\n\t\tlet pathIsDir = test(\"-d\", join(cfg.dirProject, path));\n\t\tlet files = pathIsDir\n\t\t\t? FileUtils.getFileList(join(cfg.dirProject, path))\n\t\t\t: [path];\n\n\t\tif (!pathIsDir) path = \"\";\n\t\tfor (let i = 0; i < files.length; i++) {\n\t\t\tlet file = files[i];\n\t\t\tlet content = FileUtils.readFile(join(cfg.dirProject, path, file));\n\t\t\tlet data = Beautify.content(file, content);\n\t\t\tif (data) {\n\t\t\t\tFileUtils.writeFile(cfg.dirProject, join(path, file), data, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Beautify html, js, ts or scss file(s)\n\t * Uses configuration in config.json\n\t *\n\t * @param file name\n\t * @param content of file\n\t */\n\tstatic content(file: string, content: string): string {\n\t\tlet cfg = AppConfig.getInstance();\n\t\tlet ext = extname(file);\n\t\tlet options = cfg.options.dependencies.prettier.config;\n\t\tlet parser = \"\"; // See https://prettier.io/docs/en/options.html#parser\n\t\tconst prettier = require(\"prettier\");\n\n\t\tswitch (ext) {\n\t\t\tcase \".css\":\n\t\t\t\tparser = \"css\";\n\t\t\t\tbreak;\n\t\t\tcase \".scss\":\n\t\t\t\tparser = \"css\"; // postcss is deprecated\n\t\t\t\tbreak;\n\t\t\tcase \".html\":\n\t\t\t\tparser = \"html\";\n\t\t\t\tbreak;\n\t\t\tcase \".js\":\n\t\t\t\tparser = \"babel\";\n\t\t\t\tbreak;\n\t\t\tcase \".ts\":\n\t\t\t\tparser = \"typescript\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn \"\";\n\t\t}\n\n\t\tObject.assign(options, {\n\t\t\tfilepath: file,\n\t\t\tparser: parser\n\t\t});\n\n\t\ttry {\n\t\t\tlet data = prettier.format(content, options || undefined);\n\t\t\tlog.info(`- Beautyfied ${file}`);\n\t\t\treturn data;\n\t\t} catch (err) {\n\t\t\tlog.warn(`- Failed to render file ${file} `, Logger.error2string(err));\n\t\t\treturn \"\";\n\t\t}\n\t}\n}\n"]}