{"version":3,"sources":["reporting.ts"],"names":["Item","constructor","report","description","nrColumns","Report","columns","length","createColumns","isInitialized","Group","averages","itemCount","items","min","fakeMinumum","max","percentages","addItem","item","push","update","columnHeaders","groups","initialValue","retVal","i","registrar","colTotal","sum","col","val","Math","ratio","total","addGroup","group","undefined","SimpleASCII","captions","columnSeparator","rowSeparator","isFirst","getLine","rowLine","padEnd"],"mappings":";;;;;;;;;;;AAWO,MAAMA,IAAN,CAAW;AAKjBC,EAAAA,WAAW,CAACC,MAAD,EAA4BC,WAA5B,EAAiD;AAAA;;AAAA;;AAAA;;AAC3D,QAAIC,SAAS,GACZF,MAAM,YAAYG,MAAlB,GAA2BH,MAAM,CAACI,OAAP,CAAeC,MAA1C,GAAmDL,MAAM,CAACK,MAD3D;AAEA,SAAKD,OAAL,GAAeD,MAAM,CAACG,aAAP,CAAqBJ,SAArB,CAAf;AACA,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKM,aAAL,GAAqB,KAArB;AACA;;AAXgB;;;;AAiBX,MAAMC,KAAN,SAAoBV,IAApB,CAAyB;AAS/BC,EAAAA,WAAW,CAACC,MAAD,EAA4BC,WAA5B,EAAiD;AAC3D,UAAMD,MAAN,EAAcC,WAAd;;AAD2D;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAE3D,QAAIC,SAAS,GACZF,MAAM,YAAYG,MAAlB,GAA2BH,MAAM,CAACI,OAAP,CAAeC,MAA1C,GAAmDL,MAAM,CAACK,MAD3D;AAEA,SAAKI,QAAL,GAAgBN,MAAM,CAACG,aAAP,CAAqBJ,SAArB,CAAhB;AACA,SAAKQ,SAAL,GAAiB,CAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,GAAL,GAAWT,MAAM,CAACG,aAAP,CAAqBJ,SAArB,EAAgCM,KAAK,CAACK,WAAtC,CAAX;AACA,SAAKC,GAAL,GAAWX,MAAM,CAACG,aAAP,CAAqBJ,SAArB,CAAX;AACA,SAAKa,WAAL,GAAmBZ,MAAM,CAACG,aAAP,CAAqBJ,SAArB,CAAnB;AACA;;AAEDc,EAAAA,OAAO,CAAChB,MAAD,EAAiBiB,IAAjB,EAA6B;AACnC,SAAKP,SAAL;AACA,SAAKC,KAAL,CAAWO,IAAX,CAAgBD,IAAhB;AACAjB,IAAAA,MAAM,CAACmB,MAAP,CAAcF,IAAd,EAAoB,IAApB;AACAjB,IAAAA,MAAM,CAACgB,OAAP,CAAeC,IAAf;AACA;;AA1B8B;;;;gBAAnBT,K,iBAOiB,S;;AAkDvB,MAAML,MAAN,SAAqBK,KAArB,CAA2B;AAIjCT,EAAAA,WAAW,CAACqB,aAAD,EAA0B;AACpC,UAAMA,aAAN,EAAqB,EAArB;;AADoC;;AAAA;;AAEpC,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA;;AAKD,SAAOf,aAAP,CAAqBJ,SAArB,EAAwCoB,YAAoB,GAAG,CAA/D,EAA4E;AAC3E,QAAIC,MAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,SAApB,EAA+BsB,CAAC,EAAhC,EAAoC;AACnCD,MAAAA,MAAM,CAACL,IAAP,CAAYI,YAAZ;AACA;;AACD,WAAOC,MAAP;AACA;;AAKDJ,EAAAA,MAAM,CAACF,IAAD,EAAaQ,SAAb,EAAmC;AAExC,QAAIC,QAAQ,GAAGD,SAAS,CAACrB,OAAV,CAAkBC,MAAlB,GAA2B,CAA1C;AACA,QAAIsB,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,QAAxB,EAAkCE,GAAG,EAArC,EAAyC;AACxC,UAAIC,GAAG,GAAGZ,IAAI,CAACb,OAAL,CAAawB,GAAb,CAAV;AACAD,MAAAA,GAAG,IAAIE,GAAP;AACAJ,MAAAA,SAAS,CAACrB,OAAV,CAAkBwB,GAAlB,KAA0BC,GAA1B;AACAJ,MAAAA,SAAS,CAACrB,OAAV,CAAkBsB,QAAlB,KAA+BG,GAA/B;;AACA,UAAIJ,SAAS,CAACb,GAAV,CAAcgB,GAAd,KAAsBpB,KAAK,CAACK,WAAhC,EAA6C;AAC5CY,QAAAA,SAAS,CAACb,GAAV,CAAcgB,GAAd,IAAqBC,GAArB;AACA,OAFD,MAEO;AACNJ,QAAAA,SAAS,CAACb,GAAV,CAAcgB,GAAd,IAAqBE,IAAI,CAAClB,GAAL,CAASa,SAAS,CAACb,GAAV,CAAcgB,GAAd,CAAT,EAA6BC,GAA7B,CAArB;AACA;;AACDJ,MAAAA,SAAS,CAACX,GAAV,CAAcc,GAAd,IAAqBE,IAAI,CAAChB,GAAL,CAASW,SAAS,CAACX,GAAV,CAAcc,GAAd,CAAT,EAA6BC,GAA7B,CAArB;AACA;;AACD,QAAI,CAACZ,IAAI,CAACV,aAAV,EAAyB;AACxBU,MAAAA,IAAI,CAACb,OAAL,CAAasB,QAAb,IAAyBC,GAAzB;AACAV,MAAAA,IAAI,CAACV,aAAL,GAAqB,IAArB;AACA;;AAGD,SAAK,IAAIqB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,QAAxB,EAAkCE,GAAG,EAArC,EAAyC;AACxC,UAAIG,KAAK,GAAG,CAAZ;AACA,UAAIC,KAAK,GAAGP,SAAS,CAACrB,OAAV,CAAkBsB,QAAlB,CAAZ;;AAEA,UAAID,SAAS,CAACrB,OAAV,CAAkBwB,GAAlB,KAA0B,CAA1B,IAA+BI,KAAK,IAAI,CAA5C,EAA+C;AAC9CP,QAAAA,SAAS,CAACV,WAAV,CAAsBa,GAAtB,IAA6B,CAA7B;AACA,OAFD,MAEO;AACNG,QAAAA,KAAK,GAAGN,SAAS,CAACrB,OAAV,CAAkBwB,GAAlB,IAAyBI,KAAjC;AACAP,QAAAA,SAAS,CAACV,WAAV,CAAsBa,GAAtB,IAA6BG,KAAK,GAAG,GAArC;AACA;;AACDN,MAAAA,SAAS,CAAChB,QAAV,CAAmBmB,GAAnB,IAA0BH,SAAS,CAACrB,OAAV,CAAkBwB,GAAlB,IAAyBH,SAAS,CAACf,SAA7D;AACA;;AAGDe,IAAAA,SAAS,CAACV,WAAV,CAAsBW,QAAtB,IAAkC,GAAlC;AACAD,IAAAA,SAAS,CAAChB,QAAV,CAAmBiB,QAAnB,IACCD,SAAS,CAACrB,OAAV,CAAkBsB,QAAlB,IAA8BD,SAAS,CAACf,SADzC;;AAEA,QAAIe,SAAS,CAACb,GAAV,CAAcc,QAAd,KAA2BlB,KAAK,CAACK,WAArC,EAAkD;AACjDY,MAAAA,SAAS,CAACb,GAAV,CAAcc,QAAd,IAA0BT,IAAI,CAACb,OAAL,CAAasB,QAAb,CAA1B;AACA,KAFD,MAEO;AACND,MAAAA,SAAS,CAACb,GAAV,CAAcc,QAAd,IAA0BI,IAAI,CAAClB,GAAL,CACzBa,SAAS,CAACb,GAAV,CAAcc,QAAd,CADyB,EAEzBT,IAAI,CAACb,OAAL,CAAasB,QAAb,CAFyB,CAA1B;AAIA;;AACDD,IAAAA,SAAS,CAACX,GAAV,CAAcY,QAAd,IAA0BI,IAAI,CAAChB,GAAL,CACzBW,SAAS,CAACX,GAAV,CAAcY,QAAd,CADyB,EAEzBT,IAAI,CAACb,OAAL,CAAasB,QAAb,CAFyB,CAA1B;AAIA;;AAEDO,EAAAA,QAAQ,CAACC,KAAD,EAAe;AACtB,QAAIA,KAAK,CAACxB,SAAN,IAAmB,CAAvB,EAA0B;;AAC1B,QAAI,KAAKH,aAAL,IAAsB4B,SAA1B,EAAqC;AACpC,aAAO,KAAK5B,aAAZ;AACA;;AACD,SAAKc,MAAL,CAAYH,IAAZ,CAAiBgB,KAAjB;AACA;;AAEDlB,EAAAA,OAAO,CAACC,IAAD,EAAa;AACnB,SAAKE,MAAL,CAAYF,IAAZ,EAAkB,IAAlB;AACA,SAAKP,SAAL;AACA;;AAxFgC;;;;AA8F3B,MAAM0B,WAAN,CAAkB;AAOxBrC,EAAAA,WAAW,CACVsC,QADU,EAEVjC,OAFU,EAGVkC,eAHU,EAIVC,YAJU,EAKT;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACD,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKjC,OAAL,GAAeA,OAAf;AACA,SAAKkC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA;;AAEDC,EAAAA,OAAO,CAACrC,OAAD,EAA4B;AAClC,QAAImB,MAAM,GAAG,EAAb;;AAEA,QAAI,KAAKiB,OAAT,EAAkB;AACjB,UAAIE,OAAO,GAAG,EAAd;;AACA,WAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKpB,OAAL,CAAaC,MAAjC,EAAyCmB,CAAC,EAA1C,EAA8C;AAC7CkB,QAAAA,OAAO,IAAI,GAAGC,MAAH,CAAU,KAAKvC,OAAL,CAAaoB,CAAb,CAAV,EAA2B,KAAKe,YAAhC,CAAX;AACA;;AACDG,MAAAA,OAAO,IAAI,IAAX;AAEAnB,MAAAA,MAAM,GAAGmB,OAAT;;AACA,WAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKpB,OAAL,CAAaC,MAAjC,EAAyCmB,CAAC,EAA1C,EAA8C;AAC7CD,QAAAA,MAAM,IAAI,KAAKc,QAAL,CAAcb,CAAd,EAAiBmB,MAAjB,CAAwB,KAAKvC,OAAL,CAAaoB,CAAb,CAAxB,EAAyC,GAAzC,CAAV;AACA;;AACDD,MAAAA,MAAM,IAAI,OAAOmB,OAAjB;AACA,WAAKF,OAAL,GAAe,KAAf;AACA;;AACD,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,OAAO,CAACC,MAA5B,EAAoCmB,CAAC,EAArC,EAAyC;AACxCD,MAAAA,MAAM,IAAInB,OAAO,CAACoB,CAAD,CAAP,CAAWmB,MAAX,CAAkB,KAAKvC,OAAL,CAAaoB,CAAb,CAAlB,EAAmC,GAAnC,CAAV;AACA;;AACD,WAAOD,MAAP;AACA;;AAzCuB","sourcesContent":["/**\n * Generic reporting mechanism, consisting of 3 classes: Report, Group, Item.\n *\n * For usage info, see comments at Report class.\n *\n * @todo Implement items for plain text\n */\n\n/**\n * Line in report\n */\nexport class Item {\n\tcolumns: number[];\n\tdescription: string;\n\tisInitialized: boolean;\n\n\tconstructor(report: Report | string[], description: string) {\n\t\tlet nrColumns =\n\t\t\treport instanceof Report ? report.columns.length : report.length;\n\t\tthis.columns = Report.createColumns(nrColumns);\n\t\tthis.description = description;\n\t\tthis.isInitialized = false;\n\t}\n}\n\n/**\n * Group in report\n */\nexport class Group extends Item {\n\taverages: number[];\n\titemCount: number;\n\titems: Item[];\n\tmin: number[];\n\tmax: number[];\n\tpercentages: number[];\n\tstatic fakeMinumum: number = 123456789;\n\n\tconstructor(report: Report | string[], description: string) {\n\t\tsuper(report, description);\n\t\tlet nrColumns =\n\t\t\treport instanceof Report ? report.columns.length : report.length;\n\t\tthis.averages = Report.createColumns(nrColumns);\n\t\tthis.itemCount = 0;\n\t\tthis.items = [];\n\t\tthis.min = Report.createColumns(nrColumns, Group.fakeMinumum);\n\t\tthis.max = Report.createColumns(nrColumns);\n\t\tthis.percentages = Report.createColumns(nrColumns);\n\t}\n\n\taddItem(report: Report, item: Item) {\n\t\tthis.itemCount++;\n\t\tthis.items.push(item);\n\t\treport.update(item, this); // Update item total and group totals\n\t\treport.addItem(item); // Update report totals\n\t}\n}\n\n/**\n * Highest level of report. Usage:\n *\n *\n * let report = new Report([\n * \t\"Row description\",\n * \t\"Column A\",\n * \t\"Column B\",\n * \t\"Column C\",\n * ]); // Description followed by captions for columns A-C\n *\n * let group = new Group(report, \"Group description\");\n *\n * let item = new Item(report, \"Item description\");\n * item.columns[0] = 17;\n * item.columns[1] = 6;\n * item.columns[2] = 12;\n * // item.columns[3] will contain row total of previous columns  - autamatically calculated, type int or float.\n *\n * group.addItem(report, item); // parameter 'report' is added to prevent a circular reference.\n *\n * console.log(report);\n *\n *\n * Use variable 'report' to feed a template engine.\n * <br>The variables 'report' and 'report.groups[group]' includes arrays averages[], min[] and max[]\n *     (related to array report.groups[group].columns) - type int or float.\n */\nexport class Report extends Group {\n\tcolumnHeaders: string[];\n\tgroups: Group[];\n\n\tconstructor(columnHeaders: string[]) {\n\t\tsuper(columnHeaders, \"\");\n\t\tthis.columnHeaders = columnHeaders;\n\t\tthis.groups = [];\n\t}\n\n\t/**\n\t * For internal use only\n\t */\n\tstatic createColumns(nrColumns: number, initialValue: number = 0): number[] {\n\t\tlet retVal: number[] = [];\n\t\tfor (let i = 0; i < nrColumns; i++) {\n\t\t\tretVal.push(initialValue);\n\t\t}\n\t\treturn retVal;\n\t}\n\n\t/**\n\t * For internal use only\n\t */\n\tupdate(item: Item, registrar: any): void {\n\t\t// Update columns[] - horizontal operations first\n\t\tlet colTotal = registrar.columns.length - 1; // Index last column\n\t\tlet sum = 0;\n\t\tfor (let col = 0; col < colTotal; col++) {\n\t\t\tlet val = item.columns[col];\n\t\t\tsum += val;\n\t\t\tregistrar.columns[col] += val;\n\t\t\tregistrar.columns[colTotal] += val; // Row total\n\t\t\tif (registrar.min[col] == Group.fakeMinumum) {\n\t\t\t\tregistrar.min[col] = val;\n\t\t\t} else {\n\t\t\t\tregistrar.min[col] = Math.min(registrar.min[col], val);\n\t\t\t}\n\t\t\tregistrar.max[col] = Math.max(registrar.max[col], val);\n\t\t}\n\t\tif (!item.isInitialized) {\n\t\t\titem.columns[colTotal] = sum; // Item total\n\t\t\titem.isInitialized = true;\n\t\t}\n\n\t\t// Registrar: Update percentages[] and averages[]\n\t\tfor (let col = 0; col < colTotal; col++) {\n\t\t\tlet ratio = 0;\n\t\t\tlet total = registrar.columns[colTotal];\n\n\t\t\tif (registrar.columns[col] == 0 || total == 0) {\n\t\t\t\tregistrar.percentages[col] = 0;\n\t\t\t} else {\n\t\t\t\tratio = registrar.columns[col] / total;\n\t\t\t\tregistrar.percentages[col] = ratio * 100;\n\t\t\t}\n\t\t\tregistrar.averages[col] = registrar.columns[col] / registrar.itemCount;\n\t\t}\n\n\t\t// Registrar: Update last column\n\t\tregistrar.percentages[colTotal] = 100;\n\t\tregistrar.averages[colTotal] =\n\t\t\tregistrar.columns[colTotal] / registrar.itemCount;\n\t\tif (registrar.min[colTotal] == Group.fakeMinumum) {\n\t\t\tregistrar.min[colTotal] = item.columns[colTotal];\n\t\t} else {\n\t\t\tregistrar.min[colTotal] = Math.min(\n\t\t\t\tregistrar.min[colTotal],\n\t\t\t\titem.columns[colTotal]\n\t\t\t);\n\t\t}\n\t\tregistrar.max[colTotal] = Math.max(\n\t\t\tregistrar.max[colTotal],\n\t\t\titem.columns[colTotal]\n\t\t);\n\t}\n\n\taddGroup(group: Group) {\n\t\tif (group.itemCount == 0) return;\n\t\tif (this.isInitialized != undefined) {\n\t\t\tdelete this.isInitialized;\n\t\t}\n\t\tthis.groups.push(group);\n\t}\n\n\taddItem(item: Item) {\n\t\tthis.update(item, this);\n\t\tthis.itemCount++;\n\t}\n}\n\n/**\n * Simple ASCII report\n */\nexport class SimpleASCII {\n\tcaptions: string[];\n\tcolumns: number[];\n\tcolumnSeparator: string;\n\trowSeparator: string;\n\tisFirst: boolean;\n\n\tconstructor(\n\t\tcaptions: string[],\n\t\tcolumns: number[],\n\t\tcolumnSeparator: string,\n\t\trowSeparator: string\n\t) {\n\t\tthis.captions = captions;\n\t\tthis.columns = columns;\n\t\tthis.columnSeparator = columnSeparator;\n\t\tthis.rowSeparator = rowSeparator;\n\t\tthis.isFirst = true;\n\t}\n\n\tgetLine(columns: string[]): string {\n\t\tlet retVal = \"\";\n\n\t\tif (this.isFirst) {\n\t\t\tlet rowLine = \"\";\n\t\t\tfor (let i = 0; i < this.columns.length; i++) {\n\t\t\t\trowLine += \"\".padEnd(this.columns[i], this.rowSeparator);\n\t\t\t}\n\t\t\trowLine += \"\\n\";\n\n\t\t\tretVal = rowLine;\n\t\t\tfor (let i = 0; i < this.columns.length; i++) {\n\t\t\t\tretVal += this.captions[i].padEnd(this.columns[i], \" \");\n\t\t\t}\n\t\t\tretVal += \"\\n\" + rowLine;\n\t\t\tthis.isFirst = false;\n\t\t}\n\t\tfor (let i = 0; i < columns.length; i++) {\n\t\t\tretVal += columns[i].padEnd(this.columns[i], \" \");\n\t\t}\n\t\treturn retVal;\n\t}\n}\n"]}