{"version":3,"sources":["utils.ts"],"names":["date","require","StringUtils","occurrences","str","searchFor","searchFrom","retVal","indexOf","strip","begin","end","regex","result","RegExp","exec","Formatter","constructor","cfg","AppConfig","getInstance","formatDate","options","formats","formatTime","time","formatDateTime","datetime","decimalSeparator","thousandsSeparator","instance","dt","format","decimal","nr","decimals","prefix","suffix","int","beforeComma","Math","trunc","behindComma","round","abs","pow","toString","padEnd","Number","isInteger","isNegative","portion","thousands","push","reverse","join","slugify","string","a","b","p","split","toLowerCase","replace","c","charAt"],"mappings":"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","sourcesContent":["const date = require(\"date-and-time\");\nimport { AppConfig } from \"./config\";\n\n/**\n * Utility class for strings\n */\nexport class StringUtils {\n\t/**\n\t * Count occurrences of a string within a string\n\t */\n\tstatic occurrences(str: string, searchFor: string): number {\n\t\tlet searchFrom = 0;\n\t\tlet retVal = 0;\n\n\t\twhile (str.indexOf(searchFor, searchFrom) >= 0) {\n\t\t\tretVal++;\n\t\t\tsearchFrom = str.indexOf(searchFor, searchFrom) + 1;\n\t\t}\n\t\treturn retVal;\n\t}\n\n\t/**\n\t * str.strip() removes both leading and trailing spaces. Hence...\n\t */\n\tstatic strip(str: string, begin: boolean, end: boolean): string {\n\t\tlet regex: string = \"\";\n\t\tif (begin && !end) {\n\t\t\tregex = \"^[\\\\t\\\\s]*(.*)$\";\n\t\t} else if (!begin && end) {\n\t\t\tregex = \"^*(.*)[\\\\t\\\\s]*$\";\n\t\t} else {\n\t\t\tregex = \"^[\\\\t\\\\s]*(.*)[\\\\t\\\\s]*$\";\n\t\t}\n\n\t\tlet result = new RegExp(regex).exec(str);\n\t\treturn result ? result[1] : \"\";\n\t}\n}\n\n/**\n * Generic formatting of Date objects and numbers\n */\nexport class Formatter {\n\tstatic instance: Formatter | null = null;\n\tformatDate: string;\n\tformatTime: string;\n\tformatDateTime: string;\n\tdecimalSeparator: string;\n\tthousandsSeparator: string;\n\n\tconstructor() {\n\t\tlet cfg = AppConfig.getInstance();\n\t\tthis.formatDate = cfg.options.formats.date;\n\t\tthis.formatTime = cfg.options.formats.time;\n\t\tthis.formatDateTime = cfg.options.formats.datetime;\n\t\tthis.decimalSeparator = cfg.options.formats.decimalSeparator;\n\t\tthis.thousandsSeparator = cfg.options.formats.thousandsSeparator;\n\t}\n\n\t/**\n\t * Singleton factory to get instance\n\t */\n\tstatic getInstance(): Formatter {\n\t\tif (!Formatter.instance) {\n\t\t\tFormatter.instance = new Formatter();\n\t\t}\n\n\t\treturn Formatter.instance;\n\t}\n\n\t// Date type\n\tdate(dt: Date, format: string = \"\"): string {\n\t\treturn date.format(dt, format ? format : this.formatDate);\n\t}\n\n\ttime(dt: Date, format: string = \"\"): string {\n\t\treturn date.format(dt, format ? format : this.formatTime);\n\t}\n\n\tdatetime(dt: Date, format: string = \"\"): string {\n\t\treturn date.format(dt, format ? format : this.formatDateTime);\n\t}\n\n\t// Number type\n\n\tdecimal(nr: number, decimals: number, prefix: string = \"\", suffix: string = \"\"): string {\n\t\tif (!nr) return \"\";\n\t\tif (decimals == 0) return this.int(nr);\n\n\t\tlet beforeComma = Math.trunc(nr);\n\t\tlet behindComma = Math.round(Math.abs(nr % 1) * Math.pow(10, decimals));\n\n\t\treturn prefix + this.int(beforeComma) + this.decimalSeparator + behindComma.toString().padEnd(decimals, \"0\") + suffix;\n\t}\n\n\tint(nr: number): string {\n\t\tif (!nr) return \"\";\n\t\tif (!Number.isInteger(nr)) {\n\t\t\tnr = Math.round(nr);\n\t\t}\n\n\t\tlet isNegative = nr < 0;\n\t\tlet portion: number;\n\t\tlet thousands = [];\n\t\tnr = Math.abs(nr);\n\t\twhile (nr) {\n\t\t\tportion = nr % 1000;\n\t\t\tthousands.push(portion);\n\t\t\tnr -= portion;\n\t\t\tif (nr) nr /= 1000;\n\t\t}\n\n\t\treturn (isNegative ? \"-\" : \"\") + thousands.reverse().join(this.thousandsSeparator);\n\t}\n\n\t/**\n\t * Code from https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\n\t */\n\tstatic slugify(string: string): string {\n\t\tconst a = \"àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœṕŕßśșțùúüûǘẃẍÿź'·/_,:;\";\n\t\tconst b = \"aaaaaaaaceeeeghiiiimnnnoooooprssstuuuuuwxyz-------\";\n\t\tconst p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n\t\treturn string\n\t\t\t.toString()\n\t\t\t.toLowerCase()\n\t\t\t.replace(/\\s+/g, \"-\") // Replace spaces with -\n\t\t\t.replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n\t\t\t.replace(/&/g, \"-and-\") // Replace & with 'and'\n\t\t\t.replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\n\t\t\t.replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\n\t\t\t.replace(/^-+/, \"\") // Trim - from start of text\n\t\t\t.replace(/-+$/, \"\"); // Trim - from end of text\n\t}\n}\n"]}