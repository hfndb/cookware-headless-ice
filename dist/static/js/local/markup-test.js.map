{"version":3,"sources":["markup-test.ts"],"names":["cfg","AppConfig","getInstance","log","Logger","options","logging","content","Content","outputDir","getOutputDir","session","SessionVars","useConsole","process","env","NODE_ENV","describe","it","reset","renderAll","expected","qty","html","get","to","equal","caching","exclude","dirProject","dirs","templates","read","FileUtils","getFileList","allowedExtensions","length","Lint","file","exists"],"mappings":"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","sourcesContent":["import { join } from \"path\";\nimport { expect } from \"chai\";\nimport { rm, test, touch } from \"shelljs\";\nimport { Lint } from \"./markup\";\nimport { Content } from \"../lib/html\";\nimport { AppConfig, FileUtils, Logger } from \"../lib\";\nimport { SessionVars } from \"../sys/session\";\n\n// mocha -R spec --no-colors --throw-deprecation ./dist/static/js/local/markup-test.js\n\nlet cfg = AppConfig.getInstance(\"cookware-headless-ice\");\nlet log = Logger.getInstance(cfg.options.logging);\nlog; // Fool compiler - unused variable\nlet content = new Content();\nlet outputDir = Content.getOutputDir();\nlet session = SessionVars.getInstance();\ncfg.options.logging.useConsole = false;\n\nprocess.env.NODE_ENV = \"test\";\n\ndescribe(\"HTML rendering\", function() {\n\tit(\"should render nothing\", function() {\n\t\tsession.reset();\n\t\tcontent.renderAll(false);\n\t\tlet expected = 0;\n\t\tlet qty = session.html.get(\"all\");\n\t\texpect(qty).to.equal(expected, \"counter\");\n\t});\n\n\tit(\"should render 4 files, without exclude list\", function() {\n\t\tsession.reset();\n\t\tcfg.options.html.caching.exclude = [\n\t\t\t\"test-pages\"\n\t\t]; // Start playing with config.json\n\t\tcontent.renderAll(false);\n\t\tlet expected = 4;\n\t\tlet qty = session.html.get(\"all\");\n\t\texpect(qty).to.equal(expected, \"counter\");\n\t});\n\n\tit(\"should render 4 files, after changing a template\", function() {\n\t\ttouch(join(cfg.dirProject, cfg.options.html.dirs.templates, \"base.njk\"));\n\t\tsession.reset();\n\t\tcontent.renderAll(false);\n\t\tlet expected = 4;\n\t\tlet qty = session.html.get(\"all\");\n\t\texpect(qty).to.equal(expected, \"counter\");\n\t});\n\n\tit(\"should remove 4 obsolete output files\", function() {\n\t\tcfg.read(); // Reset config.json\n\t\tcfg.options.logging.useConsole = false;\n\t\tcontent.renderAll(false);\n\t\tlet expected = 0;\n\t\tlet qty = FileUtils.getFileList(outputDir, {\n\t\t\tallowedExtensions: [\n\t\t\t\t\".html\"\n\t\t\t]\n\t\t}).length;\n\t\texpect(qty).to.equal(expected, \"actual files on disk\");\n\t});\n\n\tit(\"should lint all HTML output files\", function() {\n\t\tLint.content(false);\n\t\tlet file = join(outputDir, \"lint.html\");\n\t\tlet exists = test(\"-f\", file);\n\t\texpect(exists).to.equal(true, \"lint output file exists\");\n\t\tif (exists) rm(file);\n\t});\n});\n"]}