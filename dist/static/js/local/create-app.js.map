{"version":3,"sources":["create-app.ts"],"names":["process","argv","cfg","AppConfig","getInstance","log","Logger","options","logging","idx","Number","parseInt","bundle","javascript","apps","outDir","dirProject","dirs","output","src","source","outfile","browserify","require","dir","paths","dirMain","sep","isProject","push","env","node_path","length","concat","NODE_PATH","join","Module","_initPaths","compress","transform","global","plugin","pipe","encoding","info"],"mappings":"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","sourcesContent":["import { createWriteStream } from \"fs\";\nimport { join } from \"path\";\nimport { platform } from \"os\";\nimport { cd, test } from \"shelljs\";\nimport { AppConfig, Logger } from \"../lib\";\n\n// Usage: create-app.js <project dir> <index app>\n\ncd(process.argv[2]);\n\nlet cfg = AppConfig.getInstance(\"cookware-headless-ice\");\nlet log = Logger.getInstance(cfg.options.logging);\n\nlet idx = Number.parseInt(process.argv[3]);\nlet bundle = cfg.options.javascript.apps[idx];\nlet outDir = join(cfg.dirProject, cfg.options.javascript.dirs.output);\nlet src = join(outDir, bundle.source);\nlet outfile = join(outDir, bundle.output);\nlet browserify = require(\"browserify\");\n\n// Add some paths to NODE_PATH\nlet dir = join(cfg.dirProject, \"node_modules\");\nlet paths = [\n\tjoin(cfg.dirMain, \"node_modules\")\n];\nlet sep = platform() == \"win32\" ? \";\" : \":\";\nif (cfg.isProject && test(\"-d\", dir)) {\n\tpaths.push(cfg.dirProject);\n\tpaths.push(dir);\n}\nif (cfg.options.env.node_path && cfg.options.env.node_path.length > 0) {\n\tpaths = paths.concat(cfg.options.env.node_path);\n}\nprocess.env.NODE_PATH = paths.join(sep);\nrequire(\"module\").Module._initPaths();\n\n/*\n\tunassertify - Remove assert() calls\n\tenvify - Replace environment variablesâ€”by default, replaces NODE_ENV with \"production\"\n\tuglifyify - Remove dead code from modules\n\tcommon-shakeify - Remove unused exports from modules\n\tbrowser-pack-flat - Output a \"flat\" bundle, with all modules in a single scope\n\tbundle-collapser - When using the --no-flat option, bundle-collapser replaces file paths in require() calls with short module IDs\n */\n\nif (cfg.options.javascript.compress) {\n\t// For production use\n\tbrowserify(src)\n\t\t.transform(\"unassertify\", { global: true })\n\t\t.transform(\"envify\", { global: true })\n\t\t.transform(\"uglifyify\", { global: true })\n\t\t.plugin(\"common-shakeify\")\n\t\t.plugin(\"browser-pack-flat/plugin\")\n\t\t.bundle()\n\t\t.pipe(\n\t\t\tcreateWriteStream(outfile, {\n\t\t\t\tencoding: \"utf8\"\n\t\t\t})\n\t\t);\n} else {\n\t// For dev purposes\n\tbrowserify(src).bundle().pipe(\n\t\tcreateWriteStream(outfile, {\n\t\t\tencoding: \"utf8\"\n\t\t})\n\t);\n}\n\nlog.info(`- Written Javascript app ${bundle.output} (${cfg.options.javascript.compress ? \"compressed\" : \"plain\"}) `);\n"]}