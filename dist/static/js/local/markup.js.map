{"version":3,"sources":["markup.ts"],"names":["Lint","content","write2disk","cfg","AppConfig","getInstance","Content","log","Logger","options","logging","curDir","dir","dirProject","html","dirs","files","FileUtils","getFileList","allowedExtensions","output","process","env","NODE_ENV","info","forEach","file","relPath","includes","push","entry","FileStatus","dirMain","setSoure","data","render","source","additionalContext","useProjectTemplates","writeFile","path","cleanup","htmlcs","require","writeJsonFile","dependencies","config","result","hintFile","Html","getTagContent","tag","retVal","regex","RegExp","match","map","val","strip","replace","err"],"mappings":"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","sourcesContent":["import { join, dirname } from \"path\";\nimport { cd, pwd, rm, test } from \"shelljs\";\nimport { AppConfig, FileStatus, FileUtils, Logger } from \"../lib\";\nimport { Content } from \"../lib/html\";\n\n/**\n * For lintFile\n */\ninterface lintResult {\n\ttype: string;\n\tline: number;\n\tcolumn: number;\n\tmessage: string;\n\trule: string;\n\tcode: string;\n}\n\nexport class Lint {\n\t/**\n\t * Lint all files in HTML content directory\n\t *\n\t * @returns data of renderded template, if write2disk = false (for dev server)\n\t */\n\tstatic content(write2disk: boolean = true): string {\n\t\tlet cfg = AppConfig.getInstance();\n\t\tlet content = new Content();\n\t\tlet log = Logger.getInstance(cfg.options.logging);\n\t\tlet curDir = pwd();\n\t\tlet dir = join(cfg.dirProject, cfg.options.html.dirs.content);\n\t\tlet dirs: string[] = [];\n\t\tlet files = FileUtils.getFileList(dir, {\n\t\t\tallowedExtensions: [\".html\", \".njk\"]\n\t\t});\n\t\tlet output: object[] = [];\n\n\t\tif (process.env.NODE_ENV !== \"test\") {\n\t\t\tlog.info(\"Linting files...\");\n\t\t}\n\n\t\t// Collect linting output\n\t\tfiles.forEach((file: string) => {\n\t\t\tlet relPath = dirname(file);\n\t\t\tif (relPath && !dirs.includes(relPath)) {\n\t\t\t\t/// Remember directory, since lintHtmFilel() will write a temp config file there\n\t\t\t\tdirs.push(relPath);\n\t\t\t}\n\t\t\tif (process.env.NODE_ENV !== \"test\") {\n\t\t\t\tlog.info(`- ${file}`);\n\t\t\t}\n\t\t\toutput.push({\n\t\t\t\tfile: file,\n\t\t\t\toutput: Lint.file(join(dir, file))\n\t\t\t});\n\t\t});\n\n\t\tlet entry = new FileStatus(join(cfg.dirMain, \"content\"));\n\t\tentry.setSoure(\"lint.html\", \".html\");\n\t\tlet data = content.render(entry.dir, entry.source, {\n\t\t\tadditionalContext: { files: output },\n\t\t\tuseProjectTemplates: false\n\t\t});\n\n\t\tif (write2disk && data) {\n\t\t\t// Write linting output to file\n\t\t\tlet file = join(\"dist\", \"lint.html\");\n\t\t\tFileUtils.writeFile(cfg.dirMain, file, data, false);\n\t\t\tdata = \"\";\n\t\t\tlog.info(`... done. Output is written to system directory, ${file}`);\n\t\t} else {\n\t\t\tlog.info(`... done.`);\n\t\t}\n\n\t\t// Cleanup config files written by lintHtmFilel()\n\t\tdirs.forEach((relPath: string) => {\n\t\t\tcd(join(dir, relPath));\n\t\t\trm(\".htmlcsrc\");\n\t\t});\n\t\tcd(curDir);\n\n\t\treturn data;\n\t}\n\n\tstatic file(path: string, cleanup: boolean = false): lintResult[] {\n\t\tlet cfg = AppConfig.getInstance();\n\t\t// let log = Logger.getInstance(cfg.options.logging);\n\t\tconst htmlcs = require(\"htmlcs\");\n\t\t// Config sample:\n\t\t// https://github.com/ecomfe/htmlcs/blob/HEAD/lib/default/htmlcsrc\n\n\t\tif (!test(\"-f\", join(dirname(path), \".htmlcsrc\"))) {\n\t\t\tFileUtils.writeJsonFile(\n\t\t\t\tcfg.options.dependencies.htmlcs.config,\n\t\t\t\tdirname(path),\n\t\t\t\t\".htmlcsrc\",\n\t\t\t\tfalse\n\t\t\t);\n\t\t}\n\n\t\tlet result: lintResult[] = htmlcs.hintFile(path);\n\n\t\tif (cleanup) {\n\t\t\trm(join(dirname(path), \".htmlcsrc\"));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport class Html {\n\t/**\n\t * Get the content between a HTML opening and closing tag\n\t */\n\tstatic getTagContent(data: string, tag: string): string[] {\n\t\tlet retVal: string[] = [];\n\n\t\ttry {\n\t\t\tlet regex = new RegExp(`<${tag}.*?>(.*?)</${tag}>`, \"gim\");\n\t\t\tlet result = data.match(regex);\n\t\t\tif (result) {\n\t\t\t\tresult.map(function(val) {\n\t\t\t\t\tlet strip = new RegExp(`</?${tag}.*?>`, \"gi\");\n\t\t\t\t\tretVal.push(val.replace(strip, \"\"));\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {}\n\t\treturn retVal;\n\t}\n}\n"]}