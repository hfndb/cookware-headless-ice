{"version":3,"sources":["tags.ts"],"names":["cfg","AppConfig","getInstance","Tags","filterFlags","allowed","options","tags","styles","style","undefined","log","error","tstAllow","RegExp","join","tstIgnore","ignore","projectTags","FileUtils","readFile","dirProject","lines","split","fileTags","i","length","test","startsWith","push","forProject","dir","active","generator","async","writeFile","forFile","file","testStr","includes"],"mappings":"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","sourcesContent":["import { join } from \"path\";\nimport { exec, test } from \"shelljs\";\nimport { AppConfig, FileUtils, Logger } from \"../lib\";\n\nlet cfg = AppConfig.getInstance();\n\nexport class Tags {\n\tstatic filterFlags(): string {\n\t\tlet allowed = cfg.options.tags.styles[cfg.options.tags.style];\n\t\tif (allowed == undefined)\n\t\t\tlog.error(`Style ${cfg.options.tags.style} for tags doesn't exist`);\n\t\tlet tstAllow = new RegExp(\"\\\\b(\" + allowed.join(\"|\") + \")\\\\b\", \"i\");\n\t\tlet tstIgnore = new RegExp(\n\t\t\t\"^(\" + cfg.options.tags.ignore.join(\"|\") + \")\\\\b\",\n\t\t\t\"i\"\n\t\t);\n\n\t\tlet projectTags = FileUtils.readFile(join(cfg.dirProject, \"tags\"));\n\t\tlet lines = projectTags.split(\"\\n\");\n\t\tlet fileTags = [];\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tif (!tstAllow.test(lines[i])) continue;\n\t\t\tif (lines[i].startsWith(\"$\")) continue;\n\t\t\tif (cfg.options.tags.ignore.length > 0 && tstIgnore.test(lines[i])) continue;\n\t\t\tfileTags.push(lines[i]);\n\t\t}\n\n\t\treturn fileTags.join(\"\\n\");\n\t}\n\n\tstatic forProject(dir: string): void {\n\t\tif (!cfg.options.tags.active) return;\n\n\t\tif (cfg.options.tags.generator == \"exuberant\") {\n\t\t\texec(\n\t\t\t\t`cd ${\n\t\t\t\t\tcfg.dirProject\n\t\t\t\t}; ctags-exuberant --fields=nksSaf --file-scope=yes --sort=no  -R ./${dir}`,\n\t\t\t\t{ async: false }\n\t\t\t);\n\n\t\t\tFileUtils.writeFile(cfg.dirProject, \"tags\", Tags.filterFlags(), true);\n\t\t}\n\t}\n\n\tstatic forFile(file: string): void {\n\t\tif (!cfg.options.tags.active) return;\n\n\t\tlet projectTags = FileUtils.readFile(join(cfg.dirProject, \"tags\"));\n\t\tlet lines = projectTags.split(\"\\n\");\n\t\tlet fileTags = [];\n\t\tlet testStr = \"./\" + file;\n\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tif (lines[i].includes(testStr)) fileTags.push(lines[i]);\n\t\t}\n\n\t\tFileUtils.writeFile(\n\t\t\tcfg.dirProject,\n\t\t\tjoin(\".tags\", file),\n\t\t\tfileTags.join(\"\\n\"),\n\t\t\tfalse\n\t\t);\n\t}\n}\n"]}