{"version":3,"sources":["typescript.ts"],"names":["compileTypeScript","cfg","AppConfig","getInstance","log","Logger","options","logging","session","SessionVars","changeList","sourcePath","dirProject","javascript","dirs","source","targetPath","output","sourceExt","targetExt","processed","FileUtils","getFileList","allowedExtensions","forEach","file","path","push","FileStatus","containsChange","info","entry","target","add","ProcessingTypes","typescript","async","JavascriptUtils","bundle","removeObsolete","err","error","error2string","watchTypeScript","blockOutput","timeOut","setTimeout","clearTimeout","code","stdout","stderr","generateTsDocs","dir","dependencies","typedoc","mkdir","config","Object","assign","tsconfig","require","app","Application","src","expandInputFiles","generateDocs","logger","hasErrors"],"mappings":"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","sourcesContent":["import { join } from \"path\";\nimport { cp, exec, rm, test } from \"shelljs\";\nimport { getChangeList, AppConfig, FileStatus, FileUtils, Logger } from \"../lib\";\nimport { removeObsolete } from \"../lib/files\";\nimport { ProcessingTypes, SessionVars } from \"../sys/session\";\nimport { JavascriptUtils } from \"./javascript\";\n\n/**\n * @todo Perhaps compileTypeScript() and watchTypeScript() are obsolete. Why the f*ck use this memory and processortime slurping compiler while watching or (re)building a project? Whatever may be, at the present this file isn't used.\n */\n\n/**\n * Compile changed or new TypeScript files, using the configuration in tsconfig.json\n *\n * @todo use Typescript compiler API?\n * https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API\n * https://blog.scottlogic.com/2017/05/02/typescript-compiler-api-revisited.html\n */\nexport function compileTypeScript(): void {\n\tlet cfg = AppConfig.getInstance();\n\tlet log = Logger.getInstance(cfg.options.logging);\n\tlet session = SessionVars.getInstance();\n\n\tlet changeList = getChangeList({\n\t\tsourcePath: join(cfg.dirProject, cfg.options.javascript.dirs.source),\n\t\ttargetPath: join(cfg.dirProject, cfg.options.javascript.dirs.output),\n\t\tsourceExt: [\n\t\t\t\".ts\"\n\t\t],\n\t\ttargetExt: \".js\"\n\t});\n\tlet processed: string[] = [];\n\n\t// Before removing obsolete JavaScript, look at plain js that belongs in output directory\n\tFileUtils.getFileList(join(cfg.dirProject, cfg.options.javascript.dirs.source), {\n\t\tallowedExtensions: [\n\t\t\t\".js\"\n\t\t]\n\t}).forEach((file: string) => {\n\t\tlet path = join(cfg.dirProject, cfg.options.javascript.dirs.output, file);\n\t\tif (!test(\"-f\", path)) {\n\t\t\tcp(join(cfg.dirProject, cfg.options.javascript.dirs.source, file), path);\n\t\t}\n\t\tprocessed.push(join(cfg.options.javascript.dirs.output, file));\n\t});\n\n\tif (!FileStatus.containsChange(changeList)) {\n\t\tlog.info(\"No changes in TypeScript files found\");\n\t\treturn;\n\t}\n\n\t// TypeScript compiler options:\n\t// https://www.typescriptlang.org/docs/handbook/compiler-options.html\n\t// http://json.schemastore.org/tsconfig\n\n\tchangeList.forEach((entry: FileStatus) => {\n\t\tprocessed.push(entry.target);\n\t\tsession.add(ProcessingTypes.typescript, entry.source);\n\t});\n\n\tlog.info(\"Transcompiling Typescript\");\n\ttry {\n\t\texec(`cd ${cfg.dirProject}; tsc -b`, { async: true });\n\t\tJavascriptUtils.bundle().forEach((file: string) => {\n\t\t\tprocessed.push(file);\n\t\t});\n\n\t\tremoveObsolete(\n\t\t\tcfg.options.javascript.removeObsolete,\n\t\t\tprocessed,\n\t\t\tjoin(cfg.dirProject, cfg.options.javascript.dirs.output),\n\t\t\t\".js\"\n\t\t);\n\t} catch (err) {\n\t\tlog.error(`- Transcompile failed: `, Logger.error2string(err));\n\t}\n\n\tlog.info(\"... Typescript transcompiled\");\n}\n\nexport function watchTypeScript(): void {\n\tlet cfg = AppConfig.getInstance();\n\tlet log = Logger.getInstance(cfg.options.logging);\n\tlet blockOutput = true;\n\tlet timeOut = setTimeout(() => {\n\t\tblockOutput = false;\n\t\tclearTimeout(timeOut);\n\t}, 1 * 60 * 1000);\n\texec(`cd ${cfg.dirProject}; tsc -b -w`, function(code, stdout, stderr) {\n\t\tif (blockOutput) return;\n\t\tif (code != 0) {\n\t\t\tlog.error(\"Exit code:\", code);\n\t\t}\n\t\tif (stdout) {\n\t\t\tlog.info(\"Program output:\", stdout);\n\t\t}\n\t\tif (stderr) {\n\t\t\tlog.error(\"Program stderr:\", stderr);\n\t\t}\n\t});\n}\n\n/**\n * Generate HTML formatted docs from TypeScript sources in src.\n * Uses configuration in config.json\n *\n * @todo plugin for markdown output? https://github.com/tgreyuk/typedoc-plugin-markdown\n */\nexport function generateTsDocs(): void {\n\t// Create or clean output directory\n\tlet cfg = AppConfig.getInstance();\n\tlet dir = join(cfg.dirProject, cfg.options.dependencies.typedoc.output);\n\tlet log = Logger.getInstance(cfg.options.logging);\n\n\tif (!dir) {\n\t\tlog.error(\"Output dir for typedoc not found in config.json\");\n\t\treturn;\n\t}\n\tif (test(\"-d\", dir)) {\n\t\trm(\"-rf\", join(dir, \"*\"));\n\t} else {\n\t\tFileUtils.mkdir(dir);\n\t}\n\n\tlet options = cfg.options.dependencies.typedoc.config;\n\tObject.assign(options, {\n\t\ttsconfig: \"tsconfig.json\"\n\t});\n\n\ttry {\n\t\tconst typedoc = require(\"typedoc\");\n\t\tconst app = new typedoc.Application(options);\n\t\tconst src = app.expandInputFiles([\n\t\t\tjoin(cfg.dirProject, \"src\")\n\t\t]);\n\t\tlog.info(`Generating API docs of TypeScript files, in ${dir}`);\n\t\t// log.info(\"Might generate an error, see https://github.com/TypeStrong/typedoc/issues/438\");\n\t\t// log.info(\n\t\t// \t\"Fixed by commit, see https://github.com/true-myth/true-myth/commit/7836c259722a916b34c5be8a7218bd8b8a44c6cf:\"\n\t\t// );\n\t\tapp.generateDocs(src, dir);\n\t\t// app.generateJson(src, json);\n\t\tif (app.logger.hasErrors()) {\n\t\t\tlog.error(\"There were errors generating TypeDoc output, see above.\");\n\t\t}\n\t} catch (err) {\n\t\tlog.error(\"Failed to generate load TypeDoc project.\", Logger.error2string(err));\n\t}\n}\n"]}