{"version":3,"sources":["session.ts"],"names":["ProcessingTypes","SessionVars","constructor","Map","reset","getInstance","_instance","resetMap","mp","clear","set","epub","html","javascript","pdf","sass","typescript","add","type","file","increment","counter","Error","qty","get","undefined","toString","parent","retVal","add2retval","txt","tmp","getCounter","padEnd","length","concat","all","specific","size"],"mappings":"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","sourcesContent":["/**\n * For registration of during session processed files\n */\nexport enum ProcessingTypes {\n\tepub = \"epub\",\n\thtml = \"html\",\n\tjavascript = \"javascript\",\n\tpdf = \"pdf\",\n\tsass = \"sass\",\n\ttypescript = \"typescript\"\n}\n\n/**\n * Class with session variables, in seperate file to prevent recursive import loop\n */\nexport class SessionVars {\n\tepub = new Map();\n\thtml = new Map();\n\tjavascript = new Map();\n\tpdf = new Map();\n\tsass = new Map();\n\ttypescript = new Map();\n\t/**\n\t * @private\n\t */\n\tstatic _instance: SessionVars;\n\n\tconstructor() {\n\t\tthis.reset();\n\t}\n\n\t/**\n\t * Singleton factory to get instance\n\t */\n\tstatic getInstance() {\n\t\tif (!SessionVars._instance) {\n\t\t\tSessionVars._instance = new SessionVars();\n\t\t}\n\n\t\treturn SessionVars._instance;\n\t}\n\n\treset(): void {\n\t\tfunction resetMap(mp: Map<string, number>) {\n\t\t\tmp.clear();\n\t\t\tmp.set(\"all\", 0);\n\t\t}\n\t\tresetMap(this.epub);\n\t\tresetMap(this.html);\n\t\tresetMap(this.javascript);\n\t\tresetMap(this.pdf);\n\t\tresetMap(this.sass);\n\t\tresetMap(this.typescript);\n\t}\n\n\tadd(type: ProcessingTypes, file: string, increment: number = 1) {\n\t\tlet counter: Map<string, number>;\n\t\tswitch (type) {\n\t\t\tcase ProcessingTypes.epub:\n\t\t\t\tcounter = this.epub;\n\t\t\t\tbreak;\n\t\t\tcase ProcessingTypes.html:\n\t\t\t\tcounter = this.html;\n\t\t\t\tbreak;\n\t\t\tcase ProcessingTypes.javascript:\n\t\t\t\tcounter = this.javascript;\n\t\t\t\tbreak;\n\t\t\tcase ProcessingTypes.sass:\n\t\t\t\tcounter = this.sass;\n\t\t\t\tbreak;\n\t\t\tcase ProcessingTypes.typescript:\n\t\t\t\tcounter = this.typescript;\n\t\t\t\tbreak;\n\t\t\tcase ProcessingTypes.pdf:\n\t\t\t\tcounter = this.pdf;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type: ${type}`);\n\t\t\t\treturn;\n\t\t}\n\t\tlet qty: number = counter.get(\"all\") || 0;\n\t\tcounter.set(\"all\", qty + increment);\n\n\t\tqty = counter.get(file) || 0;\n\t\tif (qty == undefined) {\n\t\t\tqty = 0;\n\t\t}\n\t\tcounter.set(file, qty + increment);\n\t}\n\n\ttoString(): string {\n\t\tlet parent = this;\n\t\tlet retVal = \"\";\n\n\t\tfunction add2retval(mp: Map<string, number>, txt: string) {\n\t\t\tlet tmp = parent.getCounter(mp);\n\t\t\tif (tmp[1] > 0) {\n\t\t\t\tretVal += `${txt.padEnd(15, \" \")}: ${tmp[1]}\\n`;\n\t\t\t}\n\t\t}\n\t\tadd2retval(this.epub, \"ePub\");\n\t\tadd2retval(this.html, \"HTML\");\n\t\tadd2retval(this.javascript, \"JavaScript\");\n\t\tadd2retval(this.pdf, \"PDF\");\n\t\tadd2retval(this.sass, \"Sass\");\n\t\tadd2retval(this.typescript, \"TypeScript\");\n\n\t\treturn retVal.length > 0\n\t\t\t? \"\\n\"\n\t\t\t\t\t.concat(\"------------------------------------------------\\n\")\n\t\t\t\t\t.concat(\"Number of changed files during this session:\\n\")\n\t\t\t\t\t.concat(retVal)\n\t\t\t\t\t.concat(\"------------------------------------------------\\n\")\n\t\t\t: \"No changed source files detected during this session\";\n\t}\n\n\tprivate getCounter(counter: Map<any, any>): number[] {\n\t\tlet all: number = counter.get(\"all\");\n\t\tlet specific = counter.size == 1 ? 0 : counter.size - 1;\n\n\t\treturn [all, specific];\n\t}\n}\n"]}