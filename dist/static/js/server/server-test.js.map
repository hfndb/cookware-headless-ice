{"version":3,"sources":["server-test.ts"],"names":["chai","require","chaiHttp","cfg","AppConfig","getInstance","options","logging","useConsole","process","env","NODE_ENV","use","describe","eu","ExpressUtils","app","it","request","get","end","err","res","expect","status","to","equal","body","be","an","instanceof","Object"],"mappings":"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","sourcesContent":["const chai = require(\"chai\");\nconst chaiHttp = require(\"chai-http\");\nimport { AppConfig } from \"../lib/config\";\nimport { ExpressUtils } from \"../lib/express\";\nimport {\n\tgracefulShutdown as stopDevServer,\n\tcoatRack as startDevServer\n} from \"../server\";\n\nlet cfg = AppConfig.getInstance();\ncfg.options.logging.useConsole = false;\n\nprocess.env.NODE_ENV = \"test\";\n\nchai.use(chaiHttp); // Configure chai\nstartDevServer();\n\ndescribe(\"Local development server\", function() {\n\tlet eu = ExpressUtils.getInstance();\n\tlet app = eu.app;\n\n\tit(\"should render\", () => {\n\t\tchai\n\t\t\t.request(app)\n\t\t\t.get(\"/\")\n\t\t\t.end((err: Error, res: any) => {\n\t\t\t\tchai.expect(res.status).to.equal(200, \"HTTP status code home page\");\n\t\t\t\tchai.expect(res.body).be.an.instanceof(Object);\n\t\t\t\terr; // Fool compiler\n\t\t\t});\n\t});\n\n\tit(\"should render Markdown files\", () => {\n\t\tchai\n\t\t\t.request(app)\n\t\t\t.get(\"/sys/README.md\")\n\t\t\t.end((err: Error, res: any) => {\n\t\t\t\tchai.expect(res.status).to.equal(200, \"HTTP status code README.md\");\n\t\t\t\tchai.expect(res.body).be.an.instanceof(Object);\n\t\t\t\terr; // Fool compiler\n\t\t\t});\n\t});\n\n\tit(\"should render a todo list\", () => {\n\t\tchai\n\t\t\t.request(app)\n\t\t\t.get(\"/sys/todo.html\")\n\t\t\t.end((err: Error, res: any) => {\n\t\t\t\tchai.expect(res.status).to.equal(200, \"HTTP status code todo.html\");\n\t\t\t\tchai.expect(res.body).be.an.instanceof(Object);\n\t\t\t\terr; // Fool compiler\n\t\t\t});\n\t});\n\n\tit(\"should lint a HTML file\", () => {\n\t\tchai\n\t\t\t.request(app)\n\t\t\t.get(\"/?lint=true\")\n\t\t\t.end((err: Error, res: any) => {\n\t\t\t\tchai.expect(res.status).to.equal(200, \"HTTP status code lint output\");\n\t\t\t\tchai.expect(res.body).be.an.instanceof(Object);\n\t\t\t\terr; // Fool compiler\n\t\t\t});\n\t});\n});\n\nstopDevServer(); // @todo server doesn't shutdown, need to end testing using ctrl-c\n\n// https://medium.com/@asciidev/testing-a-node-express-application-with-mocha-chai-9592d41c0083\n"]}