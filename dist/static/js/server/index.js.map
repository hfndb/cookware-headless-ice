{"version":3,"sources":["index.ts"],"names":["gracefulShutdown","cfg","AppConfig","getInstance","log","Logger","options","logging","ConfigWatch","instance","Object","stop","CssWatch","SassWatch","JsWatch","session","SessionVars","info","toString","SassUtils","compile","ExpressUtils","shutdown","coatRack","server","firstUpdateSources","dirProject","watchTimeout","sass","dirs","source","javascript","useWatch","type","compiler","backupInterval","setInterval","backupChangedSource","eu","app","get","controllerContent","all","controllerSys","isProject","staticUrl","RegExp","controllerStatic","init"],"mappings":"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","sourcesContent":["import {\n\tcontrollerContent,\n\tcontrollerStatic,\n\tcontrollerSys\n} from \"./controllers\";\nimport { ConfigWatch, CssWatch, JsWatch, SassWatch } from \"./watches\";\nimport { AppConfig } from \"../lib/config\";\nimport { Logger } from \"../lib\";\nimport { ExpressUtils } from \"../lib/express\";\nimport { backupChangedSource } from \"../local/misc\";\nimport { compile as compileJs } from \"../local/babel\";\nimport { SassUtils } from \"../local/styling\";\nimport { SessionVars } from \"../sys/session\";\n// import { STATUS_CODES } from \"http\";\n\n/**\n * Stop file watching, display stats, stop server\n */\nexport function gracefulShutdown(): void {\n\tlet cfg = AppConfig.getInstance();\n\tlet log = Logger.getInstance(cfg.options.logging);\n\n\t// Stop all active file watching\n\tif (ConfigWatch.instance instanceof Object) {\n\t\tConfigWatch.instance.stop();\n\t}\n\n\tif (CssWatch.instance instanceof Object) {\n\t\tCssWatch.instance.stop();\n\t}\n\n\tif (SassWatch.instance instanceof Object) {\n\t\tSassWatch.instance.stop();\n\t}\n\n\tif (JsWatch.instance instanceof Object) {\n\t\tJsWatch.instance.stop();\n\t}\n\n\tlet session = SessionVars.getInstance();\n\tlog.info(session.toString()); // Statistics about processed files\n\n\t// Perhaps overkill, but... these function calls will delete obsolete files - due to renaming files\n\tcompileJs(false);\n\tSassUtils.compile(false);\n\n\tExpressUtils.shutdown();\n}\n\n/**\n * Organize:\n * <ol>\n *\t<li>auto-backup,</li>\n *\t<li>auto-compile,</li>\n *\t<li>file watching and<l/i>\n *\t<li>running a live development server</li>\n * </ol>\n *\n * Please read about project philosophy and related ethics in the docs, page \"Design goals and roadmap\".\n */\nexport function coatRack(): void {\n\tlet cfg = AppConfig.getInstance();\n\tlet log = Logger.getInstance(cfg.options.logging);\n\n\tif (cfg.options.server.firstUpdateSources) {\n\t\tlog.info(\"Checking (and updating) sources\");\n\t\tcompileJs(false);\n\t\tSassUtils.compile(false);\n\t\tlog.info(\"... done\");\n\t}\n\n\tlog.shutdown = gracefulShutdown;\n\n\t// Setup file watching\n\tConfigWatch.instance = new ConfigWatch(\n\t\tcfg.dirProject,\n\t\t\"\",\n\t\t\"config.json\",\n\t\tcfg.options.server.watchTimeout,\n\t\t\"application config file (config.json)\"\n\t);\n\n\tCssWatch.instance = new CssWatch(\n\t\tcfg.dirProject,\n\t\tcfg.options.sass.dirs.source,\n\t\t\"\",\n\t\tcfg.options.server.watchTimeout,\n\t\t\"plain css files\"\n\t);\n\n\tSassWatch.instance = new SassWatch(\n\t\tcfg.dirProject,\n\t\tcfg.options.sass.dirs.source,\n\t\t\"\",\n\t\tcfg.options.server.watchTimeout,\n\t\t\"Sass files\"\n\t);\n\n\tif (cfg.options.javascript.useWatch) {\n\t\tlet type = \"JavaScript\";\n\t\tswitch (cfg.options.javascript.compiler) {\n\t\t\tcase \"flow\":\n\t\t\t\ttype = \"Flow\";\n\t\t\t\tbreak;\n\t\t\tcase \"typescript\":\n\t\t\t\ttype = \"TypeScript\";\n\t\t\t\tbreak;\n\t\t}\n\t\tJsWatch.instance = new JsWatch(\n\t\t\tcfg.dirProject,\n\t\t\tcfg.options.javascript.dirs.source,\n\t\t\t\"\",\n\t\t\tcfg.options.server.watchTimeout,\n\t\t\t`${type} files`\n\t\t);\n\t}\n\n\t// Setup incremental autobackup of changed sources\n\tif (cfg.options.server.backupInterval > 0) {\n\t\tbackupChangedSource(true);\n\t\tsetInterval(\n\t\t\tbackupChangedSource,\n\t\t\tcfg.options.server.backupInterval * 60 * 1000\n\t\t);\n\t}\n\n\t// Setup express server\n\tlet eu = ExpressUtils.getInstance(false);\n\teu.app.get(/^.*\\/$/, controllerContent); // Home [of subdir]\n\teu.app.all(/^\\/.*.html$/, controllerContent); // HTML pages, to GET or POST\n\teu.app.get(/^\\/.*.md$/, controllerContent); // Markdown\n\teu.app.get(/^\\/sys\\//, controllerSys); // System start page\n\tif (cfg.isProject && cfg.options.server.staticUrl != \"static\") {\n\t\teu.app.get(\n\t\t\tnew RegExp(`^\\/${cfg.options.server.staticUrl}\\/`),\n\t\t\tcontrollerStatic\n\t\t);\n\t}\n\teu.app.get(/^\\/static\\//, controllerStatic);\n\teu.app.get(/^\\/epub/, controllerStatic);\n\teu.app.get(/^\\/pdf/, controllerStatic);\n\teu.init(gracefulShutdown);\n}\n"]}