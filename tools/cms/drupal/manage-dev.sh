#!/bin/bash

# Script to manage a local Drupal dev environment,
# in case a website is deployed to a server using Drupal
# Usage: project dir$ <path to this script/manage-dev.sh


DIR_CURRENT=`dirname $0`
source $DIR_CURRENT/env.sh # Get some vars

if [ ! -f $DIR_PROJECT/settings.json ]; then
	echo "File settings.json not found"
	exit 1
fi

# Usage: remove_dir <path> <opts>
function remove_dir {
	if [ -d $1 ]; then
		return
	fi
	rm $2 $1
}

# Initialize Drupal repository for domains
function init_drupal_repo {
	DIR_DEFAULT=$DIR_DRUPAL_REPO/default
	if [ ! -d $DIR_DEFAULT ]; then
		mkdir -p $DIR_DEFAULT
	fi
	cd $DIR_DEFAULT

	# Get Drupal tarball
	wget https://ftp.drupal.org/files/projects/drupal-$DRUPAL_VERSION.tar.gz
	tar -xzf $DIR_DRUPAL_REPO/tar.gz
	mv ./drupal-$DRUPAL_VERSION ./drupal
	echo "- Drupal in position"

	# Get modules without installing 'em in default installation
	mkdir -p ./modules
	cd ./modules
	for KEY in ${!MODULES[@]}; do
		FILE=`basename ${MODULES[${KEY}]}`
		wget ${MODULES[${KEY}]} -O $FILE
		tar -xzf $FILE
		echo "- Module ${KEY} in position"
	done
	cd $DIR_DEFAULT

	# Allow Drupal to...
	# Usage of colors requires echo -e, cat and heredoc syntax won't do
	echo ""
	echo "Local dev server will start, to create some files."
	echo -e "Please ${COLOR_LIGHT_BLUE}copy autogenerated login info${COLOR_NC} and then stop the server."
	echo ""
	echo "You can use this login info in all newly created test environments."
	echo ""
	echo "After stopping the server, use this bash script to create a default tarball for Drupal resets."
	echo ""
	echo "Press enter to continue"
	echo ""
	read
	cd ./drupal
	# Start server and fork
	php core/scripts/drupal quick-start standard -s &
	# Store the process ID
	SERVER_PID=$!
	trap on_ctrl_c INT # Trap ctrl-c so that we can exit nicely
	cd $DIR_DEFAULT
}

# Ctrl-c pressed
function on_ctrl_c() {
	if [ ! $SERVER_PID -eq 0 ]; then
		kill -9 $SERVER_PID
	fi
}

# Create tarball for Drupal resets
function default_tarball {
	cd $DIR_DRUPAL_REPO/default
	rm -f ./drupal.tgz
	mkdir -p /tmp/drupal/{sites,themes}
	sudo cp -afr ./drupal/sites /tmp/drupal/ # To overrule permissions
	cp -afr ./drupal/themes /tmp/drupal/
	cd /tmp
	tar -czf $DIR_DRUPAL_REPO/custom.tgz ./drupal
	sudo rm -rf ./drupal
}

# Initialize project for usage with Drupal
function init_project {
	cd $DIR_PROJECT
	if [ -d $DIR_PROJECT/drupal ]; then
		echo "Dir $DIR_PROJECT/drupal already exists. Won't rewrite"
		return
	fi
	mkdir drupal
	cd drupal
	tar -xzf $DIR_DRUPAL_REPO/default/custom.tgz

	# Some first files for theme
	cd themes
	mkdir $DIR_DOMAIN
	cd $DIR_DOMAIN
	mkdir {css,img,js}
	touch $DIR_DOMAIN.info.yml # theme info
	touch html.html.twig # base HTML template
	touch page.html.twig # content template
	touch $DIR_DOMAIN.libraries.yml # refs to css, js
}

# Completely resetted project
function activate_project {
	echo "Full reset of Drupal by full reinstall? y or n [default = no]"
	read $REINSTALL
	if [ "$REINSTALL" == "y" ]; then
		sudo rm -rf $DIR_INSTALL
		cp -ar $DIR_DRUPAL_REPO/default/drupal $DIR_INSTALL
		echo "- Drupal in position"
	fi

	# Put modules in position, will need activation in UI anyway
	DIR_TARGET=$DIR_INSTALL/sites/all/modules
	mkdir -p $DIR_TARGET
	for FILE in `find $DIR_DRUPAL_REPO/default/modules -mindepth 1 -maxdepth 1 -type d` ; do
		DIR=`basename $FILE`
		remove_dir $DIR_TARGET/$DIR
		ln -s $FILE $DIR_TARGET/
		echo "- Module $DIR in position"
	done

	# Put site in position (SQLite database in sites/default/files/.sqlite)
	DIR_TARGET=$DIR_INSTALL/sites/
	sudo rm -rf $DIR_TARGET/default
	cp -ar $DIR_DRUPAL_REPO/default/drupal/sites/default $DIR_TARGET
	echo "- Site in position"

	# Put theme(s) in position
	DIR_TARGET=$DIR_INSTALL/themes
	for FILE in `find $DIR_PROJECT/drupal/themes -mindepth 1 -maxdepth 1 -type d` ; do
		DIR=`basename $FILE`
		remove_dir $DIR_TARGET/$DIR "-rf"
		cp -afr $FILE $DIR_TARGET/
		echo "- Theme $DIR in position"
	done
}

# Cookware files to Drupal
function update_project {
	DIR_STATIC=$DIR_PROJECT/www/static
	DIR_THEME=$DIR_INSTALL/themes/default

	rsync -rau --delete $DIR_STATIC/css/ $DIR_THEME/css/
	rsync -rau --delete $DIR_STATIC/img/ $DIR_THEME/img/
	rsync -rau --delete $DIR_STATIC/js/  $DIR_THEME/js/
}

function open_notes {
	CORE_DIR=$DIR_DRUPAL_REPO/default/drupal/core
	THEME=$DIR_PROJECT/drupal/themes/$DIR_DOMAIN
	kate \
		$CORE_DIR/modules/system/templates/html.html.twig \
		$CORE_DIR/themes/bartik/templates/page.html.twig \
		$DIR_STUDY/*.txt \
		$THEME/$DIR_DOMAIN.info.yml \
		$THEME/html.html.twig \
		$THEME/page.html.twig \
		$THEME/$DIR_DOMAIN.libraries.yml # refs to css, js
}

function run_dev_server {
	cd $DIR_INSTALL
	php core/scripts/drupal quick-start standard -s
}

press_enter() {
	cat <<EOF

Press Enter to continue

EOF
	read
	clear
}

until [ "$SELECTION" = "0" ]; do
	clear
	# Usage of colors requires echo -e, cat and heredoc syntax won't do
	echo ""
	echo -e "    	Manage local dev Drupal installation for domain ${COLOR_LIGHT_BLUE}${DIR_DOMAIN}${COLOR_NC}"
	echo ""
	echo -e "    	${COLOR_YELLOW}Fresh installation${COLOR_NC}"
	echo    "    	1  -  Init Drupal repository"
	echo    "    	2  -  Create default tarball for Drupal resets"
	echo    "    	3  -  Init project"
	echo ""
	echo -e "    	${COLOR_YELLOW}Project testing${COLOR_NC}"
	echo    "    	4  -  (Re)actvate project"
	echo    "    	5  -  Update (copy cookware project files to Drupal)"
	echo    "    	6  -  Run dev server"
	echo ""
	echo -e "    	${COLOR_YELLOW}Other${COLOR_NC}"
	echo    "    	10 -  Open notes"
	echo ""
	echo    "    	Exit: Press enter without a choice"
	echo ""
	echo -n "  Enter selection: "
	read SELECTION
	echo ""
	case $SELECTION in
		1  ) clear ; init_drupal_repo; press_enter ;;
		2  ) clear ; default_tarball; press_enter ;;
		3  ) clear ; init_project; press_enter ;;
		4  ) clear ; activate_project; press_enter ;;
		5  ) clear ; update_project; press_enter ;;
		6  ) clear ; run_dev_server; press_enter ;;
		10 ) clear ; open_notes; press_enter ;;
		*  ) exit ;;
	esac
done
